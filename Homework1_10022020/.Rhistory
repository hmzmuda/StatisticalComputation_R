help("comment")
help(par)
par(mfrow=c(1,2),cex=0.8)
knitr::opts_chunk$set(echo = TRUE)
X = revd(1000, 0, 1)
X = revd(1000, 0, 1)
help(revd)
??revd
Help(EVD)
help(EVD)
??EVD
devtools::install_github("datacamp/RDocumentation")
library(RDocumentation)
install.packages("RDocumentation")
X = revd(1000, 0, 1)
help(revd)
install.packages('evd')
X = revd(1000, 0, 1)
X = revd(1000, 0, 1)
X = revd(1000, 0, 1)
X = revd(1000, 0, 1)
X = revd(1000, 0, 1)
X = revd(1000, 0, 1)
X = revd(1000, 0, 1)
knitr::opts_chunk$set(echo = TRUE)
X = revd(1000, 0, 1)
library(evd)
X = revd(1000, 0, 1)
library(evd)
X = revd(1000, 0, 1)
installed.packages()
.libPaths()
knitr::opts_chunk$set(echo = TRUE)
library(evd)
X = revd(1000, 0, 1)
help(evd)
install.packages(evd)
install.packages('evd')
install.packages("evd")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(evd)
library(evd)
library(evd)
X = revd(1000, 0, 1)
library('evd')
X = revd(1000, 0, 1)
.libPaths('evd')
.libPaths()
knitr::opts_chunk$set(echo = TRUE)
library('evd')
X = revd(1000, 0, 1)
X = revd(1000, 0, 1)
X = revd(1000, 0, 1)
X = revd(1000, 0, 1)
X = revd(1000, 0, 1)
X = revd(1000, 0, 1)
X = revd(1000, 0, 1)
X = revd(1000, 0, 1)
X = revd(1000, 0, 1)
X = revd(1000, 0, 1)
X = revd(1000, 0, 1)
X = revd(1000, 0, 1)
knitr::opts_chunk$set(echo = TRUE)
install.packages("locfit")
install.packages("logspline")
library(evd)
library(locfit)
library(logspline)
library(evd)
library(locfit)
library(logspline)
knitr::opts_chunk$set(echo = TRUE)
library(evd)
library(locfit)
library(logspline)
X = revd(1000, 0, 1)
X = rexp(1000, 0.5)
install.packages(evd)
library(evd)
library(locfit)
library(logspline)
par(mfrow=c(3,1))
x = rexp(10000,0.5)
hist(x,prob=T,xlim=c(0,25),ylab="",main="",font=2,cex.lab=2,font.lab=2,xlab="Exponential Distribution")
plot(logspline(x),add=T)
par(mfrow=c(3,1))
x = rexp(10000,0.5)
hist(x,prob=T,xlim=c(0,25),ylab="",main="",font=2,cex.lab=2,font.lab=2,xlab="Exponential Distribution")
plot(logspline(x),add=T)
x = rexp(10000,0.5)
hist(x,prob=T,xlim=c(0,25),ylab="",main="",font=2,cex.lab=2,font.lab=2,xlab="Exponential Distribution")
plot(logspline(x),add=T)
help(inverse)
??inverse
help(function)
??function
help(iris)
help("inverse.gaussian")
help("inverse")
help(runif)
library(locfit)
library(logspline)
f <- exp(x - exp(x))
U <- inverse(f)
help(random.function)
random.function
install.packages("inverse")
f <- exp(x - exp(x))#the standard extreme value distribution density function
q <- u - B * log(-log(U1))#inverse of the standard extreme value distribution density function
u <- 0
B <- 1
U1 <- runif(1000, 0, 1) #Random Number Generator, numbers are evenly distributed between 0 and 1
f <- exp(x - exp(x))#the standard extreme value distribution density function
q <- u - B * log(-log(U1))#inverse of the standard extreme value distribution density function
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(u){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q,prob = TRUE)
#f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(u){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q,prob = TRUE)
#f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q,prob = TRUE)
#f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q, prob = TRUE)
u <- 0
B <- 1
n <- 1000 #sample number
U1 <- runif(n, 0, 1) #Random Number Generator, numbers are evenly distributed between 0 and 1
#f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q, prob = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(locfit)
library(logspline)
u <- 0
B <- 1
n <- 1000 #sample number
U1 <- runif(n, 0, 1) #Random Number Generator, numbers are evenly distributed between 0 and 1
#f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q, prob = TRUE)
class(q)
#f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q(U1), prob = TRUE)
help(seq)
seq(0,1,0.01)
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q, prob = TRUE)
library(locfit)
library(logspline)
u <- 0
B <- 1
n <- 1000 #sample number
U1 <- runif(n, 0, 1) #Random Number Generator, numbers are evenly distributed between 0 and 1
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q, prob = TRUE)
library(locfit)
library(logspline)
u <- 0
B <- 1
n <- 1000 #sample number
U1 <- runif(n, 0, 1) #Random Number Generator, numbers are evenly distributed between 0 and 1
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q(U1), prob = TRUE)
x <- seq(0, 1, 0.01)
lines(x,f(x))
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q(U1), prob = TRUE)
x <- seq(0, 1, 0.01)
lines(x,f(x)) #density curve of f(x)
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q(U1), prob = TRUE, main = "Standard Extreme Value Distibution")
x <- seq(0, 1, 0.01)
lines(f(x)) #density curve of f(x)
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q(U1), prob = TRUE, main = "Standard Extreme Value Distibution")
x <- seq(0, 1, 0.01)
lines(density(q(U1))) #density curve of f(x)
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q(U1), prob = TRUE, main = "Standard Extreme Value Distibution")
x <- seq(0, 1, 0.01)
lines(density(q(U1))) #density curve of f(x)
box()
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q(U1), prob = TRUE, main = "Standard Extreme Value Distibution", add = T)
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q(U1), prob = TRUE, main = "Standard Extreme Value Distibution", add = T)
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q(U1), prob = TRUE, main = "Standard Extreme Value Distibution", add = T)
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q(U1), prob = TRUE, main = "Standard Extreme Value Distibution")
x <- seq(0, 1, 0.01)
lines(density(q(U1))) #density curve of f(x)
box()
u <- 1
B <- 2
n <- 1000 #sample number
U1 <- runif(n, 0, 1) #Random Number Generator, numbers are evenly distributed between 0 and 1
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q(U1), prob = TRUE, main = "Standard Extreme Value Distibution")
x <- seq(0, 1, 0.01)
lines(density(q(U1))) #density curve of f(x)
box()
u <- 0
B <- 1
n <- 1000 #sample number
U1 <- runif(n, 0, 1) #Random Number Generator, numbers are evenly distributed between 0 and 1
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q(U1), prob = TRUE, main = "Standard Extreme Value Distibution")
x <- seq(0, 1, 0.01)
lines(density(q(U1))) #density curve of f(x)
box()
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q(U1), prob = TRUE, main = "Standard Extreme Value Distibution", ylim = c(0,1))
x <- seq(0, 1, 0.01)
lines(density(q(U1))) #density curve of f(x)
box()
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q(U1), prob = TRUE, main = "Standard Extreme Value Distibution", ylim = c(0,0.6))
x <- seq(0, 1, 0.01)
lines(density(q(U1))) #density curve of f(x)
box()
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q(U1), prob = TRUE, main = "Standard Extreme Value Distibution", ylim = c(0,0.6), xlabel = "Variable", ylabel ="Density")
x <- seq(0, 1, 0.01)
lines(density(q(U1))) #density curve of f(x)
box()
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function
#histogram of simulated data
hist(q(U1), prob = TRUE, main = "Standard Extreme Value Distibution", ylim = c(0,0.6), xlab = "Variable", ylab ="Density")
x <- seq(0, 1, 0.01)
lines(density(q(U1))) #density curve of f(x)
box()
install.packages("inverse")
install.packages(Rtools)
install.packages("Rtools")
.libPaths()
lib.Paths()
lib.Path()
.libPaths()
install.packages("evd", lib="C:/Program Files/R/R-4.0.2/library")
install.packages("RDocumentation", lib="C:/Program Files/R/R-4.0.2/library")
random.function
help(random.function)
help("random.function")
help("inverse")
??uniroot
install.packages("matlib", lib="C:/Program Files/R/R-4.0.2/library")
help("inverse")
??matlib
help("matlib")
knitr::opts_chunk$set(echo = TRUE)
u <- 0
B <- 1
n <- 1000 #sample number
U1 <- runif(n, 0, 1) #Random Number Generator, numbers are evenly distributed between 0 and 1
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function, run uniform data through (U1)
#histogram of simulated data
hist(q(U1), prob = TRUE, main = "Standard Extreme Value Distibution", ylim = c(0,0.6), xlab = "Variable", ylab ="Density")
x <- seq(0, 1, 0.01)
lines(density(f(x)), col = "blue") #density curve of f(x)
lines(density(q(U1)), col = "red") #density curve of q(U1)
box()
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
fInv <- function(U1){inverse(f,-Inf,-Inf)}
hist(fInv(U1), prob = TRUE, main = "Test2", ylim = c(0,0.6), xlab = "Variable", ylab ="Density")
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
fInv <- function(U1){uniroot(f,-Inf,-Inf)}
hist(fInv(U1), prob = TRUE, main = "Test2", ylim = c(0,0.6), xlab = "Variable", ylab ="Density")
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
inverse = function (f, lower = -100, upper = 100) {function (y) uniroot((function (x) f(x) - y), lower = lower, upper = upper)}
fInv <- inverse(function (x) exp(x - exp(x)), 0, 1)
hist(fInv(U1), prob = TRUE, main = "Test2", ylim = c(0,0.6), xlab = "Variable", ylab ="Density")
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
inverse <- function(f, lower, upper){
function(y){
uniroot(function(x){f(x) - y}, lower = lower, upper = upper, tol=1e-3)[1]
}
}
fInv <- inverse(function(x){exp(x - exp(x))}, 0, 1)
hist(fInv(U1), prob = TRUE, main = "Test2", ylim = c(0,0.6), xlab = "Variable", ylab ="Density")
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
inverse <- function(f, lower, upper){
function(y){
uniroot(function(x){f(x) - y}, lower = lower, upper = upper, tol=1e-3)[1]
}
}
fInv <- inverse(function(x){exp(x - exp(x))}, 0.1, 100)
hist(fInv(U1), prob = TRUE, main = "Test2", ylim = c(0,0.6), xlab = "Variable", ylab ="Density")
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
inverse <- function(f, lower, upper){
function(y){
uniroot(function(x){f(x) - y}, lower = lower, upper = upper, tol=1e-3)
}
}
fInv <- inverse(function(x){exp(x - exp(x))}, 0.1, 100)
hist(fInv(U1), prob = TRUE, main = "Test2", ylim = c(0,0.6), xlab = "Variable", ylab ="Density")
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
inverse <- function(f, lower, upper){
function(y){
uniroot(function(x){f(x) - y}, lower = 0, upper = 100, tol=1e-3)
}
}
fInv <- inverse(function(x){exp(x - exp(x))}, 0.1, 100)
hist(fInv(U1), prob = TRUE, main = "Test2", ylim = c(0,0.6), xlab = "Variable", ylab ="Density")
#CDF for the Rayleigh distribution
f <- function(n,s){
u <- runif(n)
x <- s*sqrt(-2*ln(1-u))
return(x)
}
qqnorm(f(100,1))
#CDF for the Rayleigh distribution
f <- function(n,s){
u <- runif(n)
x <- s*sqrt(-2*log(1-u))
return(x)
}
qqnorm(f(100,1))
qqline(f(100,1),lwd=2,col=2)
#CDF for the Rayleigh distribution
f <- function(n,s){
u <- runif(n)
x <- s*sqrt(-2*log(1-u))
return(x)
}
par(mfrow=c(1,2))
#Check normality
qqnorm(f(1000,1))
qqline(f(1000,1),lwd=2,col=2)
#
#CDF for the Rayleigh distribution
f <- function(n,s){
u <- runif(n)
x <- s*sqrt(-2*log(1-u))
return(x)
}
#par(mfrow=c(1,2))
#Check normality
qqnorm(f(1000,1))
hist(f(1000,1), prob = TRUE)
#qqline(f(1000,1),lwd=2,col=2)
#
#CDF for the Rayleigh distribution
r <- function(n,s){
u <- runif(n)
x <- s*sqrt(-2*log(1-u))
return(x)
}
#par(mfrow=c(1,2))
#Check normality
qqnorm(r(1000,1))
hist(r(1000,1), prob = TRUE)
#qqline(f(1000,1),lwd=2,col=2)
#
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
inverse <- function(f, lower, upper){
function(y){
uniroot(function(x){f(x) - y}, lower = 0, upper = 100, tol=1e-3)
}
}
fInv <- inverse(function(x){exp(x - exp(x))}, 0.1, 100)
hist(fInv(U1), prob = TRUE, main = "Test2", ylim = c(0,0.6), xlab = "Variable", ylab ="Density")
help("quantile")
u <- 0
B <- 1
n <- 1000 #sample number
U1 <- runif(n, 0, 1) #Random Number Generator, numbers are evenly distributed between 0 and 1
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function, run uniform data through (U1)
#histogram of simulated data
hist(q(U1), prob = TRUE, main = "Standard Extreme Value Distibution", ylim = c(0,1), xlab = "Variable", ylab ="Density")
x <- seq(0, 1, 0.01)
lines(density(f(x)), col = "blue") #density curve of f(x)
lines(density(q(U1)), col = "red") #density curve of q(U1)
box()
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function, run uniform data through (U1)
#histogram of simulated data
hist(q(U1), prob = TRUE, main = "Standard Extreme Value Distibution", ylim = c(0,1), xlab = "Variable", ylab ="Density")
x <- seq(0, 1, 0.01)
lines(density(f(x)), col = "blue") #density curve of f(x)
lines(density(q(U1)), col = "red") #density curve of q(U1)
box()
u <- 0
B <- 1
n <- 1000 #sample number
U1 <- runif(n, 0, 1) #Random Number Generator, numbers are evenly distributed between 0 and 1
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function, run uniform data through (U1)
#histogram of simulated data
hist(q(U1), prob = TRUE, main = "Standard Extreme Value Distibution", ylim = c(0,1), xlab = "Variable", ylab ="Density")
x <- seq(0, 1, 0.01)
lines(density(f(x)), col = "blue") #density curve of f(x)
lines(density(q(U1)), col = "red") #density curve of q(U1)
box()
u <- 0
B <- 1
n <- 1000 #sample number
U1 <- runif(n, 0, 1) #Random Number Generator, numbers are evenly distributed between 0 and 1
f <- function(x){x - exp(x)}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function, run uniform data through (U1)
#histogram of simulated data
hist(q(U1), prob = TRUE, main = "Standard Extreme Value Distibution", ylim = c(0,1), xlab = "Variable", ylab ="Density")
x <- seq(0, 1, 0.01)
lines(density(f(x)), col = "blue") #density curve of f(x)
lines(density(q(U1)), col = "red") #density curve of q(U1)
box()
f <- function(x){exp(x - exp(x))}#the standard extreme value distribution density function
q <- function(U1){u - B * log(-log(U1))}#inverse of the standard extreme value distribution density function, run uniform data through (U1)
#histogram of simulated data
hist(q(U1), prob = TRUE, main = "Standard Extreme Value Distibution", ylim = c(0,1), xlab = "Variable", ylab ="Density")
x <- seq(0, 1, 0.01)
lines(density(f(x)), col = "blue") #density curve of f(x)
lines(density(q(U1)), col = "red") #density curve of q(U1)
box()
