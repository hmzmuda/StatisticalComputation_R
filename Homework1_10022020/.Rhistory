print(U2) #U2
#step 3: accept U2 and set theta=U2, if U2 <= f(theta)/g(theta)/M
i = 1
x<-runif(n,0,1)
while(i <= n){
print(theta[i]*exp(-theta[i]*x[i-1])) / (-theta[i]^(alpha + 1)*(theta[i] * (x[i-1] + beta))^(-alpha - 1)*rgamma(1,alpha + 1, beta + x[i-1])) / M)
#Functions
#f <- function(t){t*exp(-t*x)}
#g <- function(t){-t^(alpha + 1) * (t * (x + beta))^(-alpha - 1) * rgamma(1,alpha + 1, beta + x)}
acceptReject <- function(alpha,beta,n){
#functions from proofs
theta <- rgamma(n,alpha, beta) #theta value
print(theta)
M <- (beta^alpha)/(factorial(alpha-1))
print(M) #M
#step2: generate U2 to be a uniform distribution
U2 <- runif(n,0,1)
print(U2) #U2
#step 3: accept U2 and set theta=U2, if U2 <= f(theta)/g(theta)/M
i = 1
x<-runif(n,0,1)
while(i <= n){
print(theta[i]*exp(-theta[i]*x[i-1]) / (-theta[i]^(alpha + 1)*(theta[i] * (x[i-1] + beta))^(-alpha - 1)*rgamma(1,alpha + 1, beta + x[i-1])) / M)
if(U2[i] <= (theta[i]*exp(-theta[i]*x[i-1])) / (-theta[i]^(alpha + 1)*(theta[i] * (x[i-1] + beta))^(-alpha - 1)*rgamma(1,alpha + 1, beta + x[i-1])) / M){
theta[i] = U2[i]
assign(x[i],theta[i]*exp(-theta[i]*x) / (-theta[i]^(alpha + 1) * (theta[i] * (x + beta))^(-alpha - 1) * rgamma(1,alpha + 1, beta + x)) / M)
}
else{
theta[i] = 1
assign(x[i],theta[i]*exp(-theta[i]*x) / (-theta[i]^(alpha + 1) * (theta[i] * (x + beta))^(-alpha - 1) * rgamma(1,alpha + 1, beta + x)) / M)
}
i = i + 1
alpha <- alpha + 1
beta <- beta + x[i]
print(x[i])
}
return(x)
}
set.seed(475)
n <- 5#number of samples
alpha <- 4 #alpha
beta <- 2 #beta
X <- acceptReject(alpha,beta,n)
#Functions
#f <- function(t){t*exp(-t*x)}
#g <- function(t){-t^(alpha + 1) * (t * (x + beta))^(-alpha - 1) * rgamma(1,alpha + 1, beta + x)}
acceptReject <- function(alpha,beta,n){
#functions from proofs
theta <- rgamma(n,alpha, beta) #theta value
print(theta)
M <- (beta^alpha)/(factorial(alpha-1))
print(M) #M
#step2: generate U2 to be a uniform distribution
U2 <- runif(n,0,1)
print(U2) #U2
#step 3: accept U2 and set theta=U2, if U2 <= f(theta)/g(theta)/M
i = 1
x<-runif(n,0,1)
print(x)
while(i <= n){
print(theta[i]*exp(-theta[i]*x[i-1]) / (-theta[i]^(alpha + 1)*(theta[i] * (x[i-1] + beta))^(-alpha - 1)*rgamma(1,alpha + 1, beta + x[i-1])) / M)
if(U2[i] <= (theta[i]*exp(-theta[i]*x[i-1])) / (-theta[i]^(alpha + 1)*(theta[i] * (x[i-1] + beta))^(-alpha - 1)*rgamma(1,alpha + 1, beta + x[i-1])) / M){
theta[i] = U2[i]
assign(x[i],theta[i]*exp(-theta[i]*x) / (-theta[i]^(alpha + 1) * (theta[i] * (x + beta))^(-alpha - 1) * rgamma(1,alpha + 1, beta + x)) / M)
}
else{
theta[i] = 1
assign(x[i],theta[i]*exp(-theta[i]*x) / (-theta[i]^(alpha + 1) * (theta[i] * (x + beta))^(-alpha - 1) * rgamma(1,alpha + 1, beta + x)) / M)
}
i = i + 1
alpha <- alpha + 1
beta <- beta + x[i]
print(x[i])
}
return(x)
}
set.seed(475)
n <- 5#number of samples
alpha <- 4 #alpha
beta <- 2 #beta
X <- acceptReject(alpha,beta,n)
#Functions
#f <- function(t){t*exp(-t*x)}
#g <- function(t){-t^(alpha + 1) * (t * (x + beta))^(-alpha - 1) * rgamma(1,alpha + 1, beta + x)}
acceptReject <- function(alpha,beta,n){
#functions from proofs
theta <- rgamma(n,alpha, beta) #theta value
print(theta)
M <- (beta^alpha)/(factorial(alpha-1))
print(M) #M
#step2: generate U2 to be a uniform distribution
U2 <- runif(n,0,1)
print(U2) #U2
#step 3: accept U2 and set theta=U2, if U2 <= f(theta)/g(theta)/M
i = 1
x<-runif(n,0,1)
print(x)
while(i <= n){
print(theta[i]*exp(-theta[i]*x[i]) / (-theta[i]^(alpha + 1)*(theta[i] * (x[i] + beta))^(-alpha - 1)*rgamma(1,alpha + 1, beta + x[i])) / M)
if(U2[i] <= (theta[i]*exp(-theta[i]*x[i-1])) / (-theta[i]^(alpha + 1)*(theta[i] * (x[i-1] + beta))^(-alpha - 1)*rgamma(1,alpha + 1, beta + x[i-1])) / M){
theta[i] = U2[i]
assign(x[i],theta[i]*exp(-theta[i]*x) / (-theta[i]^(alpha + 1) * (theta[i] * (x + beta))^(-alpha - 1) * rgamma(1,alpha + 1, beta + x)) / M)
}
else{
theta[i] = 1
assign(x[i],theta[i]*exp(-theta[i]*x) / (-theta[i]^(alpha + 1) * (theta[i] * (x + beta))^(-alpha - 1) * rgamma(1,alpha + 1, beta + x)) / M)
}
i = i + 1
alpha <- alpha + 1
beta <- beta + x[i]
print(x[i])
}
return(x)
}
set.seed(475)
n <- 5#number of samples
alpha <- 4 #alpha
beta <- 2 #beta
X <- acceptReject(alpha,beta,n)
library(pracma)
##  Quadrature with Gauss-Legendre nodes and weights
#evaluation points: sqrt(3/5),0,-sqrt(3/5)
#function
f <- function(x) x*exp(2*x)
# m = 2n-1 = (2*3)-1 = 5
cc <- gaussLegendre(3,-1,1)
#sum the weights*f(x)
Q <- sum(cc$w * f(cc$x*2 + 2))*2
#print weights
print(cc) #weights and x values
print(Q) #Approximate Value
integrand <-function(x) x*exp(2*x)
exact <- integrate(f,0,4)
exactValue <- exact$value
print(exactValue)#"Exact Value"
error <- abs((Q-exactValue)/exactValue)*100
print(error)#error
runif(1)
vector(length(2))
?vector
vector(mode = "logical", length = 2)
?rep
#Functions
f <- function(t,x){return(t*exp(-t*x))}
acceptReject <- function(alpha,beta,n,x){
#MLE/theta hat equation
MLE <- 1/x
#number of times theta hat is accepted
acceptRate <- 0
#number of times gone through loop
i <- 0
#initalize the output vector
result <- rep(1,n)
while(acceptRate <= n){
#step2a: generate U2 to be a uniform distribution
U2 <- runif(1)
#step2b: create theta in terms of a gamma distribution
theta <- rgamma(n,alpha + 1, beta + x)
#step 3: accept U2 and set theta=U2, if U2 <= f(theta)/f(MLE)
if(U2 <= f(theta,x)/f(MLE,x)){
acceptRate = acceptRate + 1
result[acceptRate] = theta
}
i = i + 1
}
return(result,acceptRate)
}
set.seed(100)
n <- 1000#number of samples
alpha <- 1 #alpha
beta <- 1 #beta
x <- 1
X <- acceptReject(alpha,beta,n,x)
#Functions
f <- function(t,x){return(t*exp(-t*x))}
acceptReject <- function(alpha,beta,n,x){
#MLE/theta hat equation
MLE <- 1/x
#number of times theta hat is accepted
acceptRate <- 0
#number of times gone through loop
i <- 0
#initalize the output vector
result <- vector(length = n)
while(acceptRate <= n){
#step2a: generate U2 to be a uniform distribution
U2 <- runif(1)
#step2b: create theta in terms of a gamma distribution
theta <- rgamma(1,shape = alpha + 1, rate = beta + x)
#step 3: accept U2 and set theta=U2, if U2 <= f(theta)/f(MLE)
if(U2 <= f(theta,x)/f(MLE,x)){
acceptRate = acceptRate + 1
result[acceptRate] = theta
}
i = i + 1
}
return(result,acceptRate)
}
set.seed(100)
n <- 1000#number of samples
alpha <- 1 #alpha
beta <- 1 #beta
x <- 1
X <- acceptReject(alpha,beta,n,x)
?list
#Functions
f <- function(t,x){return(t*exp(-t*x))}
acceptReject <- function(alpha,beta,n,x){
#MLE/theta hat equation
MLE <- 1/x
#number of times theta hat is accepted
acceptRate <- 0
#number of times gone through loop
i <- 0
#initalize the output vector
result <- vector(length = n)
while(acceptRate <= n){
#step2a: generate U2 to be a uniform distribution
U2 <- runif(1)
#step2b: create theta in terms of a gamma distribution
theta <- rgamma(1,shape = alpha + 1, rate = beta + x)
#step 3: accept U2 and set theta=U2, if U2 <= f(theta)/f(MLE)
if(U2 <= f(theta,x)/f(MLE,x)){
acceptRate = acceptRate + 1
result[acceptRate] = theta
}
i = i + 1
}
return(list(result,acceptRate))
}
set.seed(100)
n <- 1000#number of samples
alpha <- 1 #alpha
beta <- 1 #beta
x <- 1
X <- acceptReject(alpha,beta,n,x)
result <- X$result
hist(result,probability = T,ylim=c(0,1))
#Functions
f <- function(t,x){return(t*exp(-t*x))}
acceptReject <- function(alpha,beta,n,x){
#MLE/theta hat equation
MLE <- 1/x
#number of times theta hat is accepted
acceptRate <- 0
#number of times gone through loop
i <- 0
#initalize the output vector
result <- vector(length = n)
while(acceptRate <= n){
#step2a: generate U2 to be a uniform distribution
U2 <- runif(1)
#step2b: create theta in terms of a gamma distribution
theta <- rgamma(1,shape = alpha + 1, rate = beta + x)
#step 3: accept U2 and set theta=U2, if U2 <= f(theta)/f(MLE)
if(U2 <= f(theta,x)/f(MLE,x)){
acceptRate = acceptRate + 1
result[acceptRate] = theta
}
i = i + 1
}
return(list(result,acceptRate))
}
set.seed(100)
n <- 1000#number of samples
alpha <- 1 #alpha
beta <- 1 #beta
x <- 1
X <- acceptReject(alpha,beta,n,x)
result <- X[[1]]
hist(result, probability = T, ylim=c(0,1), breaks = 30)
#lines(X,dgamma(X),col = 'red')#true normal pdf
#lines(xx,g(xx)*m(x),col = 'green')#adjusted pdf
#Functions
f <- function(t,x){return(t*exp(-t*x))}
acceptReject <- function(alpha,beta,n,x){
#MLE/theta hat equation
MLE <- 1/x
#number of times theta hat is accepted
acceptRate <- 0
#number of times gone through loop
i <- 0
#initalize the output vector
result <- vector(length = n)
while(acceptRate <= n){
#step2a: generate U2 to be a uniform distribution
U2 <- runif(1)
#step2b: create theta in terms of a gamma distribution
theta <- rgamma(1,shape = alpha + 1, rate = beta + x)
#step 3: accept U2 and set theta=U2, if U2 <= f(theta)/f(MLE)
if(U2 <= f(theta,x)/f(MLE,x)){
acceptRate = acceptRate + 1
result[acceptRate] = theta
}
i = i + 1
}
return(list(result,acceptRate))
}
set.seed(100)
n <- 1000#number of samples
alpha <- 1 #alpha
beta <- 1 #beta
x <- 1
X <- acceptReject(alpha,beta,n,x)
result <- X[[1]]
hist(result, probability = T, ylim=c(0,1), breaks = result/10)
#Functions
f <- function(t,x){return(t*exp(-t*x))}
acceptReject <- function(alpha,beta,n,x){
#MLE/theta hat equation
MLE <- 1/x
#number of times theta hat is accepted
acceptRate <- 0
#number of times gone through loop
i <- 0
#initalize the output vector
result <- vector(length = n)
while(acceptRate <= n){
#step2a: generate U2 to be a uniform distribution
U2 <- runif(1)
#step2b: create theta in terms of a gamma distribution
theta <- rgamma(1,shape = alpha + 1, rate = beta + x)
#step 3: accept U2 and set theta=U2, if U2 <= f(theta)/f(MLE)
if(U2 <= f(theta,x)/f(MLE,x)){
acceptRate = acceptRate + 1
result[acceptRate] = theta
}
i = i + 1
}
return(list(result,acceptRate))
}
set.seed(100)
n <- 1000#number of samples
alpha <- 1 #alpha
beta <- 1 #beta
x <- 1
X <- acceptReject(alpha,beta,n,x)
result <- X[[1]]
hist(result, probability = T, ylim=c(0,1), breaks = max(result)/10)
#Functions
f <- function(t,x){return(t*exp(-t*x))}
acceptReject <- function(alpha,beta,n,x){
#MLE/theta hat equation
MLE <- 1/x
#number of times theta hat is accepted
acceptRate <- 0
#number of times gone through loop
i <- 0
#initalize the output vector
result <- vector(length = n)
while(acceptRate <= n){
#step2a: generate U2 to be a uniform distribution
U2 <- runif(1)
#step2b: create theta in terms of a gamma distribution
theta <- rgamma(1,shape = alpha + 1, rate = beta + x)
#step 3: accept U2 and set theta=U2, if U2 <= f(theta)/f(MLE)
if(U2 <= f(theta,x)/f(MLE,x)){
acceptRate = acceptRate + 1
result[acceptRate] = theta
}
i = i + 1
}
return(list(result,acceptRate))
}
set.seed(100)
n <- 1000#number of samples
alpha <- 1 #alpha
beta <- 1 #beta
x <- 1
X <- acceptReject(alpha,beta,n,x)
result <- X[[1]]
hist(result, probability = T, ylim=c(0,1), breaks = 50)
#lines(X,dgamma(X),col = 'red')#true normal pdf
#lines(xx,g(xx)*m(x),col = 'green')#adjusted pdf
#Functions
f <- function(t,x){return(t*exp(-t*x))}
acceptReject <- function(alpha,beta,n,x){
#MLE/theta hat equation
MLE <- 1/x
#number of times theta hat is accepted
acceptRate <- 0
#number of times gone through loop
i <- 0
#initalize the output vector
result <- vector(length = n)
while(acceptRate <= n){
#step2a: generate U2 to be a uniform distribution
U2 <- runif(1)
#step2b: create theta in terms of a gamma distribution
theta <- rgamma(1,shape = alpha + 1, rate = beta + x)
#step 3: accept U2 and set theta=U2, if U2 <= f(theta)/f(MLE)
if(U2 <= f(theta,x)/f(MLE,x)){
acceptRate = acceptRate + 1
result[acceptRate] = theta
}
i = i + 1
}
return(list(result,acceptRate))
}
set.seed(100)
n <- 1000#number of samples
alpha <- 1 #alpha
beta <- 1 #beta
x <- 1
X <- acceptReject(alpha,beta,n,x)
result <- X[[1]]
hist(result, probability = T, ylim=c(0,1), breaks = 70)
#lines(X,dgamma(X),col = 'red')#true normal pdf
#lines(xx,g(xx)*m(x),col = 'green')#adjusted pdf
#Functions
f <- function(t,x){return(t*exp(-t*x))}
acceptReject <- function(alpha,beta,n,x){
#MLE/theta hat equation
MLE <- 1/x
#number of times theta hat is accepted
acceptRate <- 0
#number of times gone through loop
i <- 0
#initalize the output vector
result <- vector(length = n)
while(acceptRate <= n){
#step2a: generate U2 to be a uniform distribution
U2 <- runif(1)
#step2b: create theta in terms of a gamma distribution
theta <- rgamma(1,shape = alpha + 1, rate = beta + x)
#step 3: accept U2 and set theta=U2, if U2 <= f(theta)/f(MLE)
if(U2 <= f(theta,x)/f(MLE,x)){
acceptRate = acceptRate + 1
result[acceptRate] = theta
}
i = i + 1
}
return(list(result,acceptRate))
}
set.seed(100)
n <- 1000#number of samples
alpha <- 1 #alpha
beta <- 1 #beta
x <- 1
X <- acceptReject(alpha,beta,n,x)
result <- X[[1]]
hist(result, probability = T, ylim=c(0,1), breaks = 40)
#lines(X,dgamma(X),col = 'red')#true normal pdf
#lines(xx,g(xx)*m(x),col = 'green')#adjusted pdf
#Functions
f <- function(t,x){return(t*exp(-t*x))}
acceptReject <- function(alpha,beta,n,x){
#MLE/theta hat equation
MLE <- 1/x
#number of times theta hat is accepted
acceptRate <- 0
#number of times gone through loop
i <- 0
#initalize the output vector
result <- vector(length = n)
while(acceptRate <= n){
#step2a: generate U2 to be a uniform distribution
U2 <- runif(1)
#step2b: create theta in terms of a gamma distribution
theta <- rgamma(1,shape = alpha + 1, rate = beta + x)
#step 3: accept U2 and set theta=U2, if U2 <= f(theta)/f(MLE)
if(U2 <= f(theta,x)/f(MLE,x)){
acceptRate = acceptRate + 1
result[acceptRate] = theta
}
i = i + 1
}
return(list(result,acceptRate))
}
set.seed(100)
n <- 1000#number of samples
alpha <- 1 #alpha
beta <- 1 #beta
x <- 1
X <- acceptReject(alpha,beta,n,x)
result <- X[[1]]
hist(result, probability = T, ylim=c(0,1), breaks = 40)
lines(result,dgamma(result),col = 'red')#true normal pdf
#Functions
f <- function(t,x){return(t*exp(-t*x))}
acceptReject <- function(alpha,beta,n,x){
#MLE/theta hat equation
MLE <- 1/x
#number of times theta hat is accepted
acceptRate <- 0
#number of times gone through loop
i <- 0
#initalize the output vector
result <- vector(length = n)
while(acceptRate <= n){
#step2a: generate U2 to be a uniform distribution
U2 <- runif(1)
#step2b: create theta in terms of a gamma distribution
theta <- rgamma(1,shape = alpha + 1, rate = beta + x)
#step 3: accept U2 and set theta=U2, if U2 <= f(theta)/f(MLE)
if(U2 <= f(theta,x)/f(MLE,x)){
acceptRate = acceptRate + 1
result[acceptRate] = theta
}
i = i + 1
}
return(list(result,acceptRate))
}
#posterior
set.seed(100)
n <- 1000#number of samples
alpha <- 1 #alpha
beta <- 1 #beta
x <- 1 #x-value
X <- acceptReject(alpha,beta,n,x)
result <- X[[1]]
hist(result, probability = T, ylim=c(0,1), breaks = 40)
