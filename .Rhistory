}
}
fcn <- function(x){sqrt(x)-cos(x)}
dx <- function(x){0.5*(x^(-0.5)) + sin(x)}
newMe <- newton(fcn, dx, 0, 2, 1, 3, 1e-7)
newMe$root
newMe$iterations
newton <- function(f, fPrime, a, b, inital, nMax, tol){
#set inital value
x0 <- inital
j <- nMax
iteration <- 0
#check for upper and lower bounds
fa <- f(a)
fb <- f(b)
if (fa == 0.0) {
return (a)
}
if (fb == 0.0) {
return(b)
}
#begin loop for loop method
for (i in 1:nMax) {
x1 <- x0 - (f(x0)/fPrime(x0))
j[i] <- x1
if (abs(x1 - x0) < tol){
root <- tail(j, n = 1)
result <- list('root' = root, 'iterations' = j)
return(result)
}
x0 <- x1
}
}
fcn <- function(x){sqrt(x)-cos(x)}
dx <- function(x){0.5*(x^(-0.5)) + sin(x)}
newMe <- newton(fcn, dx, 0, 2, 1, 3, 1e-7)
newMe$root
newMe$iterations
newton <- function(f, fPrime, a, b, inital, nMax, tol){
#set inital value
x0 <- inital
j <- nMax
iteration <- 0
#begin loop for loop method
for (i in 1:nMax) {
x1 <- x0 - (f(x0)/fPrime(x0))
j[i] <- x1
if (abs(x1 - x0) < tol){
root <- tail(j, n = 1)
result <- list('root' = root, 'iterations' = j)
return(result)
}
x0 <- x1
}
}
fcn <- function(x){sqrt(x)-cos(x)}
dx <- function(x){0.5*(x^(-0.5)) + sin(x)}
newMe <- newton(fcn, dx, 0, 2, 1, 3, 1e-7)
newMe$root
newMe$iterations
newton <- function(f, fPrime, a, b, inital, nMax, tol){
#set inital value
x0 <- inital
j <- nMax
#begin loop for loop method
for (i in 1:nMax) {
x1 <- x0 - (f(x0)/fPrime(x0))
j[i] <- x1
if (abs(x1 - x0) < tol){
root <- tail(j, n = 1)
result <- list('root' = root, 'iterations' = j)
return(result)
}
x0 <- x1
}
}
fcn <- function(x){sqrt(x)-cos(x)}
dx <- function(x){0.5*(x^(-0.5)) + sin(x)}
newMe <- newton(fcn, dx, 0, 2, 1, 3, 1e-7)
newMe$root
newMe$iterations
?rep
newton <- function(f, fPrime, a, b, inital, nMax, tol){
#set inital value
x0 <- inital
j <- rep(NaN,nMax)
#begin loop for loop method
for (i in 1:nMax) {
x1 <- x0 - (f(x0)/fPrime(x0))
j[i] <- x1
if (abs(x1 - x0) < tol){
root <- tail(j, n = 1)
result <- list('root' = root, 'iterations' = j)
return(result)
}
x0 <- x1
}
}
fcn <- function(x){sqrt(x)-cos(x)}
dx <- function(x){0.5*(x^(-0.5)) + sin(x)}
newMe <- newton(fcn, dx, 0, 2, 1, 3, 1e-7)
newMe$root
newMe$iterations
new <- newton.method(FUN = function(x) sqrt(x)-cos(x),init = 1,rg = c(0,2),interact = FALSE)
newton <- function(f, fPrime, a, b, inital, nMax, tol){
#set inital value
x0 <- inital
j <- rep(NaN,nMax)
#begin loop for loop method
for (i in 1:nMax) {
x1 <- x0 - (f(x0)/fPrime(x0))
j[i] <- x1
if (abs(x1 - x0) < tol){
root <- tail(j, n = 1)
result <- list('root' = root, 'iterations' = j)
return(result)
}
x0 <- x1
}
}
fcn <- function(x){sqrt(x)-cos(x)}
dx <- function(x){0.5*(x^(-0.5)) + sin(x)}
newMe <- newton(fcn, dx, 0, 2, 1, 3, 1e-7)
newMe$root
newMe$iterations
new <- newton.method(FUN = function(x) sqrt(x)-cos(x),init = 1,rg = c(0,2),interact = FALSE)
newton <- function(f, fPrime, a, b, inital, nMax, tol){
#set inital value
x0 <- inital
j <- rep(NaN,nMax)
#begin loop for loop method
for (i in 1:nMax) {
x1 <- x0 - (f(x0)/fPrime(x0))
j[i] <- x1
if (abs(x1 - x0) < tol){
root <- tail(j, n = 1)
result <- list('root' = root, 'iterations' = j)
return(result)
}
x0 <- x1
}
}
fcn <- function(x){sqrt(x)-cos(x)}
dx <- function(x){0.5*(x^(-0.5)) + sin(x)}
newMe <- newton(fcn, dx, 0, 2, 1, 3, 1e-7)
newMe$root
newMe$iterations
newton <- function(f, fPrime, a, b, inital, nMax, tol){
#set inital value
x0 <- inital
j <- rep(NaN,nMax)
#begin loop for loop method
for (i in 1:nMax) {
x1 <- x0 - (f(x0)/fPrime(x0))
if (abs(x1 - x0) < tol){
root <- x1
result <- list('root' = root, 'iterations' = j)
return(result)
}
x0 <- x1
}
}
fcn <- function(x){sqrt(x)-cos(x)}
dx <- function(x){0.5*(x^(-0.5)) + sin(x)}
newMe <- newton(fcn, dx, 0, 2, 1, 3, 1e-7)
newMe$root
newMe$iterations
newton <- function(f, fPrime, a, b, inital, nMax, tol){
#set inital value
x0 <- inital
j <- rep(NaN,nMax)
#begin loop for loop method
for (i in 1:nMax) {
x1 <- x0 - (f(x0)/fPrime(x0))
if (abs(x1 - x0) < tol){
root <- x1
result <- list('root' = root, 'iterations' = i)
return(result)
}
x0 <- x1
}
}
fcn <- function(x){sqrt(x)-cos(x)}
dx <- function(x){0.5*(x^(-0.5)) + sin(x)}
newMe <- newton(fcn, dx, 0, 2, 1, 3, 1e-7)
newMe$root
newMe$iterations
newton <- function(f, dx, inital, nMax, tol){
#set initial value
x0 <- inital
#begin loop for loop method
for (i in 1:nMax) {
x1 <- x0 - (f(x0)/dx(x0))
if (abs(x1 - x0) < tol){
root <- x1
result <- list('root' = root, 'iterations' = i)
return(result)
}
x0 <- x1
}
}
fcn <- function(x){sqrt(x)-cos(x)}
dx <- function(x){0.5*(x^(-0.5)) + sin(x)}
newMe <- newton(fcn, dx, 1, 3, 1e-7)
newMe$root
newMe$iterations
newton <- function(f, dx, inital, nMax, tol){
#set initial value
x0 <- inital
#begin loop for loop method
for (i in 1:nMax) {
x1 <- x0 - (f(x0)/dx(x0))
if (abs(x1 - x0) < tol){
root <- x1
result <- list('root' = root, 'iterations' = i)
return(result)
}
x0 <- x1
}
}
f <- function(x){sqrt(x)-cos(x)}
dx <- function(x){0.5*(x^(-0.5)) + sin(x)}
newMe <- newton(f, dx, 1, 3, 1e-5)
newMe$root
newMe$iterations
newton <- function(f, dx, inital, nMax, tol){
#set initial value
x0 <- inital
#begin loop for loop method
for (i in 1:nMax) {
x1 <- x0 - (f(x0)/dx(x0))
if (abs(x1 - x0) <= tol){
root <- x1
result <- list('root' = root, 'iterations' = i)
return(result)
}
x0 <- x1
}
}
f <- function(x){sqrt(x)-cos(x)}
dx <- function(x){0.5*(x^(-0.5)) + sin(x)}
newMe <- newton(f, dx, 1, 3, 1e-5)
newMe$root
newMe$iterations
newton <- function(f, dx, a, b, inital, nMax, tol){
#set initial value
x0 <- inital
if(f(a) == 0.0){
return(a)
}
if(f(b) == 0.0){
return(b)
}
#begin loop for loop method
for (i in 1:nMax) {
x1 = x0 - (f(x0)/dx(x0))
if (abs(x1 - x0) <= tol){
root <- x1
result <- list('root' = root, 'iterations' = i)
return(result)
}
x0 <- x1
}
}
f <- function(x){sqrt(x)-cos(x)}
dx <- function(x){0.5*(x^(-0.5)) + sin(x)}
newMe <- newton(f, dx, 1, 3, 1e-5)
newton <- function(f, dx, a, b, inital, nMax, tol){
#set initial value
x0 <- inital
if(f(a) == 0.0){
return(a)
}
if(f(b) == 0.0){
return(b)
}
#begin loop for loop method
for (i in 1:nMax) {
x1 = x0 - (f(x0)/dx(x0))
if (abs(x1 - x0) <= tol){
root <- x1
result <- list('root' = root, 'iterations' = i)
return(result)
}
x0 <- x1
}
}
f <- function(x){sqrt(x)-cos(x)}
dx <- function(x){0.5*(x^(-0.5)) + sin(x)}
newMe <- newton(f, dx, 0, 2, 1, 3, 1e-5)
newMe$root
newMe$iterations
newton <- function(f, dx, a, b, inital, nMax, tol){
#set initial value
x0 <- inital
rootArray <- nMax
if(f(a) == 0.0){
return(a)
}
if(f(b) == 0.0){
return(b)
}
#begin loop for loop method
for (i in 1:nMax) {
x1 = x0 - (f(x0)/dx(x0))
rootArray[i] <- x1
if (abs(x1 - x0) <= tol){
root <- tail(rootArray,n = 1)
result <- list('root' = root, 'iterations' = rootArray)
return(result)
}
x0 <- x1
}
}
f <- function(x){sqrt(x)-cos(x)}
dx <- function(x){0.5*(x^(-0.5)) + sin(x)}
newMe <- newton(f, dx, 0, 2, 1, 3, 1e-5)
newMe$root
newMe$iterations
bisection <- function(f, a, b, nMax, tol)
{
#initiate the a and b value, assume intervals will be proper
iteration <- 0
#check bounds
#Check bounds
if(f(a) == 0.0){
return(a)
}
if(f(b) == 0.0){
return(b)
}
for (i in 1:nMax){
c <- (a + b)/2 #Calc the midpoint
if(f(c) != 0) {
#TRUE: f(c) > tol AND i <=NMAX
if((abs(f(c)) > tol)) {
if(sign(f(c)) == sign(f(a))) {
a <- c
b <- b
}
else {
a <- a
b <- c
}
c <- (a + b)/2
iteration = iteration + 1
}
else {
#the f(c) is within the range of tolerance
break
}
}
else {
#FALSE: f(c) is a root
break
}
}
return(list("it" = iteration, "root" = c))
}
fcn <- function(x){sqrt(x)-cos(x)}
bmMe <- bisection(fcn, 0, 2, 3, 1e-7)
root <- bmMe$root
iteration <- bmMe$it
newton <- function(f, dx, a, b, inital, nMax, tol){
#set initial value
x0 <- inital
rootArray <- nMax
#Check bounds
if(f(a) == 0.0){
return(a)
}
if(f(b) == 0.0){
return(b)
}
#begin loop for loop method
for (i in 1:nMax) {
print(i)
x1 = x0 - (f(x0)/dx(x0))
rootArray[i] <- x1
if (abs(x1 - x0) <= tol){
root <- tail(rootArray,n = 1)
result <- list('root' = root, 'iterations' = rootArray)
return(result)
}
x0 <- x1
}
}
f <- function(x){sqrt(x)-cos(x)}
dx <- function(x){0.5*(x^(-0.5)) + sin(x)}
newMe <- newton(f, dx, 0, 2, 1, 3, 1e-5)
newMe$root
newMe$iterations
newton <- function(f, dx, a, b, inital, nMax, tol){
#set initial value
x0 <- inital
rootArray <- nMax
#Check bounds
if(f(a) == 0.0){
return(a)
}
if(f(b) == 0.0){
return(b)
}
#begin loop for loop method
for (i in 1:nMax) {
print(i)
x1 = x0 - (f(x0)/dx(x0))
print(x1)
rootArray[i] <- x1
if (abs(x1 - x0) <= tol){
root <- tail(rootArray,n = 1)
result <- list('root' = root, 'iterations' = rootArray)
return(result)
}
x0 <- x1
}
}
f <- function(x){sqrt(x)-cos(x)}
dx <- function(x){0.5*(x^(-0.5)) + sin(x)}
newMe <- newton(f, dx, 0, 2, 1, 3, 1e-5)
newMe$root
newMe$iterations
newton <- function(f, dx, a, b, inital, nMax, tol){
#set initial value
x0 <- inital
rootArray <- nMax
#Check bounds
if(f(a) == 0.0){
return(a)
}
if(f(b) == 0.0){
return(b)
}
#begin loop for loop method
for (i in 1:nMax) {
print(i)
x1 = x0 - (f(x0)/dx(x0))
print(x1)
print(abs(x1 - x0))
rootArray[i] <- x1
if (abs(x1 - x0) <= tol){
root <- tail(rootArray,n = 1)
result <- list('root' = root, 'iterations' = rootArray)
return(result)
}
x0 <- x1
}
}
f <- function(x){sqrt(x)-cos(x)}
dx <- function(x){0.5*(x^(-0.5)) + sin(x)}
newMe <- newton(f, dx, 0, 2, 1, 3, 1e-5)
newMe$root
newMe$iterations
newton <- function(f, dx, a, b, inital, nMax, tol){
#set initial value
x0 <- inital
rootArray <- nMax
#Check bounds
if(f(a) == 0.0){
return(a)
}
if(f(b) == 0.0){
return(b)
}
#begin loop for loop method
for (i in 1:nMax) {
print(i)
x1 = x0 - (f(x0)/dx(x0))
print(x1)
print(abs(x1 - x0))
rootArray[i] <- x1
if (abs(x1 - x0) <= tol){
root <- tail(rootArray,n = 1)
result <- list('root' = root, 'iterations' = rootArray)
return(result)
}
x0 <- x1
}
}
f <- function(x){sqrt(x)-cos(x)}
dx <- function(x){0.5*(x^(-0.5)) + sin(x)}
newMe <- newton(f, dx, 0, 2, 1, 3, 1e-3)
newMe$root
newMe$iterations
newton <- function(f, dx, a, b, inital, nMax, tol){
#set initial value
x0 <- inital
rootArray <- nMax
#Check bounds
if(f(a) == 0.0){
return(a)
}
if(f(b) == 0.0){
return(b)
}
#begin loop for loop method
for (i in 1:nMax) {
x1 = x0 - (f(x0)/dx(x0))
rootArray[i] <- x1
if (abs(x1 - x0) <= tol){
root <- tail(rootArray,n = 1)
result <- list('root' = root, 'iterations' = rootArray)
return(result)
}
x0 <- x1
}
}
f <- function(x){sqrt(x)-cos(x)}
dx <- function(x){0.5*(x^(-0.5)) + sin(x)}
newMe <- newton(f, dx, 0, 2, 1, 3, 1e-3)
newMe$root
newMe$iterations
