}
#double derivative of the likelihood function
d2l <- function(N, b1, b2, theta.old){
result11 <- sum(-(N*b1^2)/(theta.old)^2)#1st row, 1st col
result12 <- sum(-(N*b1*b2)/(theta.old)^2)#1st row,2nd col
result22 <- sum(-(N*b2^2)/(theta.old)^2)#2nd row, 2nd col
result21 <- sum(-(N*b2*b1)/(theta.old)^2)#2nd row, 1st col
output <- as.numeric(list(result11,result21,result12,result22))
return(matrix(data = output, nrow = 2, ncol = 2, dimnames = NULL))
}
#Fisher Information
I <- function(N, b1, b2, theta.old){
result11 <- sum(mean((N*b1^2)/(theta.old)^2))#1st row, 1st col
result12 <- sum(mean((N*b1*b2)/(theta.old)^2))#1st row,2nd col
result22 <- sum(mean((N*b2^2)/(theta.old)^2))#2nd row, 2nd col
result21 <- sum(mean((N*b2*b1)/(theta.old)^2))#2nd row, 1st col
output <- as.numeric(list(result11,result21,result12,result22))
return(matrix(data = output, nrow = 2, ncol = 2, dimnames = NULL))
}
#Newton's Method
new.oil <- function(N,b1,b2,dl,d2l,tol){
n <- length(N)
i <- 1
theta.old <- c(b1[1],b2[1])
for(i in 1:n){
theta.new = theta.old - (solve(d2l(N,b1,b2,theta.old)) %*% dl(N,b1,b2,theta.old))
if(abs(theta.new - theta.old) <= tol){
output.new <- theta.new
return(output.new)
}
theta.old <- theta.new
}
}
#Fisher Information Approach
fish.oil <- function(N,b1,b2,dl,I,tol){
n <- length(N)
i <- 1
theta.old <- c(b1[1],b2[1])
for(i in 1:n){
theta.new = theta.old + (solve(I(N,b1,b2,theta.old)) %*% dl(N,b1,b2,theta.old))
if(abs(a-a0) <= tol){
output.fish <- theta.new
return(output.fish)
}
theta.old <- theta.new
}
}
#main body of code (i.e. no function definitions)
N <- data.oil$spills
b1 <- data.oil$importexport
b2 <- data.oil$domestic
output.new <- new.oil(N,b1,b2,dl,d2l,1e-5)
#import data set from Givens et al.
data.oil <- read.table("oilspills.dat",header = TRUE)
#likelihood function
l <- function(N, theta.old){
result <- sum(N*log(theta.old)) - sum(theta.old) - sum(log(factorial(N)))
return(result)
}
#derivative of the likelihood function
dl <- function(N, b1, b2, theta.old){
result1 <- sum((N*b1)/(theta.old)-sum(b1))
result2 <- sum((N*b2)/(theta.old)-sum(b2))
output <- as.numeric(list(result1,result2))
return(matrix(data = output, nrow = 2, ncol = 1, dimnames = NULL))
}
#double derivative of the likelihood function
d2l <- function(N, b1, b2, theta.old){
result11 <- sum(-(N*b1^2)/(theta.old)^2)#1st row, 1st col
result12 <- sum(-(N*b1*b2)/(theta.old)^2)#1st row,2nd col
result22 <- sum(-(N*b2^2)/(theta.old)^2)#2nd row, 2nd col
result21 <- sum(-(N*b2*b1)/(theta.old)^2)#2nd row, 1st col
output <- as.numeric(list(result11,result21,result12,result22))
return(matrix(data = output, nrow = 2, ncol = 2, dimnames = NULL))
}
#Fisher Information
I <- function(N, b1, b2, theta.old){
result11 <- sum(mean((N*b1^2)/(theta.old)^2))#1st row, 1st col
result12 <- sum(mean((N*b1*b2)/(theta.old)^2))#1st row,2nd col
result22 <- sum(mean((N*b2^2)/(theta.old)^2))#2nd row, 2nd col
result21 <- sum(mean((N*b2*b1)/(theta.old)^2))#2nd row, 1st col
output <- as.numeric(list(result11,result21,result12,result22))
return(matrix(data = output, nrow = 2, ncol = 2, dimnames = NULL))
}
#Newton's Method
new.oil <- function(N,b1,b2,dl,d2l,tol){
n <- length(N)
i <- 1
theta.old <- c(b1[1],b2[1])
for(i in 1:n){
theta.new = theta.old - (solve(d2l(N,b1,b2,theta.old)) %*% dl(N,b1,b2,theta.old))
if(abs(theta.new - theta.old) <= tol){
output.new <- theta.new
return(output.new)
}
theta.old <- theta.new
}
}
#Fisher Information Approach
fish.oil <- function(N,b1,b2,dl,I,tol){
n <- length(N)
i <- 1
theta.old <- c(b1[1],b2[1])
for(i in 1:n){
theta.new = theta.old + (solve(I(N,b1,b2,theta.old)) %*% dl(N,b1,b2,theta.old))
if(abs(a-a0) <= tol){
output.fish <- theta.new
return(output.fish)
}
theta.old <- theta.new
}
}
#main body of code (i.e. no function definitions)
N <- data.oil$spills
b1 <- data.oil$importexport
b2 <- data.oil$domestic
output.new <- new.oil(N,b1,b2,dl,d2l,1e-2)
sum(b1)
N*b1
b1^2
N*b1^2
N*(b1^2)
N*b1*b2
#import data set from Givens et al.
data.oil <- read.table("oilspills.dat",header = TRUE)
#likelihood function
l <- function(N, theta.old){
result <- sum(N*log(theta.old)) - sum(theta.old) - sum(log(factorial(N)))
return(result)
}
#derivative of the likelihood function
dl <- function(N, b1, b2, theta.old){
result1 <- sum((N*b1)/(theta.old)-sum(b1))
result2 <- sum((N*b2)/(theta.old)-sum(b2))
output <- as.numeric(list(result1,result2))
return(matrix(data = output, nrow = 2, ncol = 1, dimnames = NULL))
}
#double derivative of the likelihood function
d2l <- function(N, b1, b2, theta.old){
result11 <- sum(-(N*b1^2)/(theta.old)^2)#1st row, 1st col
result12 <- sum(-(N*b1*b2)/(theta.old)^2)#1st row,2nd col
result22 <- sum(-(N*b2^2)/(theta.old)^2)#2nd row, 2nd col
result21 <- sum(-(N*b2*b1)/(theta.old)^2)#2nd row, 1st col
output <- as.numeric(list(result11,result21,result12,result22))
return(matrix(data = output, nrow = 2, ncol = 2, dimnames = NULL))
}
#Fisher Information
I <- function(N, b1, b2, theta.old){
result11 <- sum(mean((N*b1^2)/(theta.old)^2))#1st row, 1st col
result12 <- sum(mean((N*b1*b2)/(theta.old)^2))#1st row,2nd col
result22 <- sum(mean((N*b2^2)/(theta.old)^2))#2nd row, 2nd col
result21 <- sum(mean((N*b2*b1)/(theta.old)^2))#2nd row, 1st col
output <- as.numeric(list(result11,result21,result12,result22))
return(matrix(data = output, nrow = 2, ncol = 2, dimnames = NULL))
}
#Newton's Method
new.oil <- function(N,b1,b2,dl,d2l,tol){
n <- length(N)
i <- 1
theta.old <- c(b1,b2)
for(i in 1:n){
theta.new = theta.old - (solve(d2l(N,b1,b2,theta.old)) %*% dl(N,b1,b2,theta.old))
if(abs(theta.new - theta.old) <= tol){
output.new <- theta.new
return(output.new)
}
theta.old <- theta.new
}
}
#Fisher Information Approach
fish.oil <- function(N,b1,b2,dl,I,tol){
n <- length(N)
i <- 1
theta.old <- c(b1,b2)
for(i in 1:n){
theta.new = theta.old + (solve(I(N,b1,b2,theta.old)) %*% dl(N,b1,b2,theta.old))
if(abs(a-a0) <= tol){
output.fish <- theta.new
return(output.fish)
}
theta.old <- theta.new
}
}
#main body of code (i.e. no function definitions)
N <- data.oil$spills
b1 <- data.oil$importexport
b2 <- data.oil$domestic
output.new <- new.oil(N,b1,b2,dl,d2l,1e-2)
#import data set from Givens et al.
data.oil <- read.table("oilspills.dat",header = TRUE)
#likelihood function
l <- function(N, theta.old){
result <- sum(N*log(theta.old)) - sum(theta.old) - sum(log(factorial(N)))
return(result)
}
#derivative of the likelihood function
dl <- function(N, b1, b2, theta.old){
result1 <- sum((N*b1)/(theta.old)-sum(b1))
result2 <- sum((N*b2)/(theta.old)-sum(b2))
output <- as.numeric(list(result1,result2))
return(matrix(data = output, nrow = 2, ncol = 1, dimnames = NULL))
}
#double derivative of the likelihood function
d2l <- function(N, b1, b2, theta.old){
result11 <- sum(-(N*b1^2)/(theta.old)^2)#1st row, 1st col
result12 <- sum(-(N*b1*b2)/(theta.old)^2)#1st row,2nd col
result22 <- sum(-(N*b2^2)/(theta.old)^2)#2nd row, 2nd col
result21 <- sum(-(N*b2*b1)/(theta.old)^2)#2nd row, 1st col
output <- as.numeric(list(result11,result21,result12,result22))
return(matrix(data = output, nrow = 2, ncol = 2, dimnames = NULL))
}
#Fisher Information
I <- function(N, b1, b2, theta.old){
result11 <- sum(mean((N*b1^2)/(theta.old)^2))#1st row, 1st col
result12 <- sum(mean((N*b1*b2)/(theta.old)^2))#1st row,2nd col
result22 <- sum(mean((N*b2^2)/(theta.old)^2))#2nd row, 2nd col
result21 <- sum(mean((N*b2*b1)/(theta.old)^2))#2nd row, 1st col
output <- as.numeric(list(result11,result21,result12,result22))
return(matrix(data = output, nrow = 2, ncol = 2, dimnames = NULL))
}
#Newton's Method
new.oil <- function(N,b1,b2,dl,d2l,tol){
n <- length(N)
i <- 1
theta.old <- c(b1,b2)#need it to be a 2x26 matrix, but not sure what inital value to assign to it.
for(i in 1:n){
theta.new = theta.old - (solve(d2l(N[i],b1[i],b2[i],theta.old)) %*% dl(N[i],b1[i],b2[i],theta.old))
if(abs(theta.new - theta.old) <= tol){
output.new <- theta.new
return(output.new)
}
theta.old <- theta.new
}
}
#Fisher Information Approach
fish.oil <- function(N,b1,b2,dl,I,tol){
n <- length(N)
i <- 1
theta.old <- c(b1,b2)
for(i in 1:n){
theta.new = theta.old + (solve(I(N[i],b1[i],b2[i],theta.old)) %*% dl(N[i],b1[i],b2[i],theta.old))
if(abs(theta.new - theta.old) <= tol){
output.fish <- theta.new
return(output.fish)
}
theta.old <- theta.new
}
}
#main body of code (i.e. no function definitions)
N <- data.oil$spills
b1 <- data.oil$importexport
b2 <- data.oil$domestic
output.new <- new.oil(N,b1,b2,dl,d2l,1e-2)
#import data set from Givens et al.
data.oil <- read.table("oilspills.dat",header = TRUE)
#likelihood function
l <- function(N, theta.old){
result <- sum(N*log(theta.old)) - sum(theta.old) - sum(log(factorial(N)))
return(result)
}
#derivative of the likelihood function
dl <- function(N, b1, b2, theta.old){
result1 <- sum((N*b1)/(theta.old)-sum(b1))
result2 <- sum((N*b2)/(theta.old)-sum(b2))
output <- as.numeric(list(result1,result2))
return(matrix(data = output, nrow = 2, ncol = 1, dimnames = NULL))
}
#double derivative of the likelihood function
d2l <- function(N, b1, b2, theta.old){
result11 <- sum(-(N*b1^2)/(theta.old)^2)#1st row, 1st col
result12 <- sum(-(N*b1*b2)/(theta.old)^2)#1st row,2nd col
result22 <- sum(-(N*b2^2)/(theta.old)^2)#2nd row, 2nd col
result21 <- sum(-(N*b2*b1)/(theta.old)^2)#2nd row, 1st col
output <- as.numeric(list(result11,result21,result12,result22))
return(matrix(data = output, nrow = 2, ncol = 2, dimnames = NULL))
}
#Fisher Information
I <- function(N, b1, b2, theta.old){
result11 <- sum(mean((N*b1^2)/(theta.old)^2))#1st row, 1st col
result12 <- sum(mean((N*b1*b2)/(theta.old)^2))#1st row,2nd col
result22 <- sum(mean((N*b2^2)/(theta.old)^2))#2nd row, 2nd col
result21 <- sum(mean((N*b2*b1)/(theta.old)^2))#2nd row, 1st col
output <- as.numeric(list(result11,result21,result12,result22))
return(matrix(data = output, nrow = 2, ncol = 2, dimnames = NULL))
}
#Newton's Method
new.oil <- function(N,b1,b2,dl,d2l,tol){
n <- length(N)
i <- 1
theta.old <- c(1,1)#need it to be a 2x26 matrix, but not sure what inital value to assign to it.
for(i in 1:n){
theta.new = theta.old - (solve(d2l(N[i],b1[i],b2[i],theta.old)) %*% dl(N[i],b1[i],b2[i],theta.old))
if(abs(theta.new - theta.old) <= tol){
output.new <- theta.new
return(output.new)
}
theta.old <- theta.new
}
}
#Fisher Information Approach
fish.oil <- function(N,b1,b2,dl,I,tol){
n <- length(N)
i <- 1
theta.old <- c(1,1)
for(i in 1:n){
theta.new = theta.old + (solve(I(N[i],b1[i],b2[i],theta.old)) %*% dl(N[i],b1[i],b2[i],theta.old))
if(abs(theta.new - theta.old) <= tol){
output.fish <- theta.new
return(output.fish)
}
theta.old <- theta.new
}
}
#main body of code (i.e. no function definitions)
N <- data.oil$spills
b1 <- data.oil$importexport
b2 <- data.oil$domestic
output.new <- new.oil(N,b1,b2,dl,d2l,1e-2)
thub
itr = 40
x.values = matrix(0,itr+1,2)
x
x.values
knitr::opts_chunk$set(echo = TRUE)
library(NLRoot)
library(animation)
library(optimr)
library(MASS)
#import data set from Givens et al.
data.oil <- read.table("oilspills.dat",header = TRUE)
#likelihood function
l <- function(N, theta.old){
result <- sum(N*log(theta.old)) - sum(theta.old) - sum(log(factorial(N)))
return(result)
}
#derivative of the likelihood function
dl <- function(N, b1, b2, theta.old){
result1 <- sum((N*b1)/(theta.old)-sum(b1))
result2 <- sum((N*b2)/(theta.old)-sum(b2))
output <- as.numeric(list(result1,result2))
return(matrix(data = output, ncol = 1))
}
#double derivative of the likelihood function
d2l <- function(N, b1, b2, theta.old){
result11 <- sum(-(N*b1^2)/(theta.old)^2)#1st row, 1st col
result12 <- sum(-(N*b1*b2)/(theta.old)^2)#non-principal components
result22 <- sum(-(N*b2^2)/(theta.old)^2)#2nd row, 2nd col
output <- as.numeric(list(result11,result12,result12,result22))
return(matrix(data = output, nrow = 2, ncol = 2, byrow = TRUE))
}
#Fisher Information
I <- function(N, b1, b2, theta.old){
result11 <- sum(mean((N*b1^2)/(theta.old)^2))#1st row, 1st col
result12 <- sum(mean((N*b1*b2)/(theta.old)^2))#non-principal components
result22 <- sum(mean((N*b2^2)/(theta.old)^2))#2nd row, 2nd col
output <- as.numeric(list(result11,result12,result12,result22))
return(matrix(data = output, nrow = 2, byrow = TRUE))
}
#Newton's Method
new.oil <- function(N,b1,b2,dl,d2l){
n <- length(N)
i <- 1
theta.old <- c(1,1)#need it to be a 2x26 matrix, but not sure what inital value to assign to it.
theta.values = matrix(0,n+1,2)
theta.values[1,] = theta.old
for(i in 1:n){
theta.new = theta.old - (solve(d2l(N,b1,b2,theta.old)) %*% dl(N,b1,b2,theta.old))
theta.values[i+1,] = theta.new
# if(abs(theta.new - theta.old) <= tol){
#   output.new <- theta.new
#   return(output.new)
# }
# theta.old <- theta.new
}
return(theta.values)
}
#Fisher Information Approach
fish.oil <- function(N,b1,b2,dl,I){
n <- length(N)
i <- 1
theta.old <- c(1,1)#need it to be a 2x26 matrix, but not sure what inital value to assign to it.
theta.values = matrix(0,n+1,2)
theta.values[1,] = theta.old
for(i in 1:n){
theta.new = theta.old - (solve(I(N,b1,b2,theta.old)) %*% dl(N,b1,b2,theta.old))
theta.values[i+1,] = theta.new
}
return(theta.values)
}
#main body of code (i.e. no function definitions)
N <- data.oil$spills
b1 <- data.oil$importexport
b2 <- data.oil$domestic
output.new <- new.oil(N,b1,b2,dl,d2l)
#output.fish <- fish.oil(N,b1,b2,dl,I)
View(output.new)
View(output.new)
#import data set from Givens et al.
data.oil <- read.table("oilspills.dat",header = TRUE)
#likelihood function
l <- function(N, theta.old){
result <- sum(N*log(theta.old)) - sum(theta.old) - sum(log(factorial(N)))
return(result)
}
#derivative of the likelihood function
dl <- function(N, b1, b2, theta.old){
result1 <- sum((N*b1)/(theta.old)-sum(b1))
result2 <- sum((N*b2)/(theta.old)-sum(b2))
output <- as.numeric(list(result1,result2))
return(matrix(data = output, ncol = 1))
}
#double derivative of the likelihood function
d2l <- function(N, b1, b2, theta.old){
result11 <- sum(-(N*b1^2)/(theta.old)^2)#1st row, 1st col
result12 <- sum(-(N*b1*b2)/(theta.old)^2)#non-principal components
result22 <- sum(-(N*b2^2)/(theta.old)^2)#2nd row, 2nd col
output <- as.numeric(list(result11,result12,result12,result22))
return(matrix(data = output, nrow = 2, ncol = 2, byrow = TRUE))
}
#Fisher Information
I <- function(N, b1, b2, theta.old){
result11 <- sum(mean((N*b1^2)/(theta.old)^2))#1st row, 1st col
result12 <- sum(mean((N*b1*b2)/(theta.old)^2))#non-principal components
result22 <- sum(mean((N*b2^2)/(theta.old)^2))#2nd row, 2nd col
output <- as.numeric(list(result11,result12,result12,result22))
return(matrix(data = output, nrow = 2, byrow = TRUE))
}
#Newton's Method
new.oil <- function(N,b1,b2,dl,d2l){
n <- length(N)
i <- 1
theta.old <- c(1,1)#need it to be a 2x26 matrix, but not sure what inital value to assign to it.
theta.values = matrix(0,n+1,2)
theta.values[1,] = theta.old
for(i in 1:n){
theta.new = theta.old - (solve(d2l(N,b1,b2,theta.old)) %*% dl(N,b1,b2,theta.old))
theta.values[i+1,] = theta.new
# if(abs(theta.new - theta.old) <= tol){
#   output.new <- theta.new
#   return(output.new)
# }
# theta.old <- theta.new
}
return(theta.values)
}
#Fisher Information Approach
fish.oil <- function(N,b1,b2,dl,I){
n <- length(N)
i <- 1
theta.old <- c(1,1)#need it to be a 2x26 matrix, but not sure what inital value to assign to it.
theta.values = matrix(0,n+1,2)
theta.values[1,] = theta.old
for(i in 1:n){
theta.new = theta.old - (solve(I(N,b1,b2,theta.old)) %*% dl(N,b1,b2,theta.old))
theta.values[i+1,] = theta.new
}
return(theta.values)
}
#main body of code (i.e. no function definitions)
N <- data.oil$spills
b1 <- data.oil$importexport
b2 <- data.oil$domestic
output.new <- new.oil(N,b1,b2,dl,d2l)
output.fish <- fish.oil(N,b1,b2,dl,I)
## INITIAL VALUES
x = c(-2,-2)
itr = 40
x.values = matrix(0,itr+1,2)
x.values[1,] = x
## OBJECTIVE FUNCTION AND DERIVATIVES
g = function(x){(-1)*((((x[1]^2)+x[2]-11)^2)+(x[1]+(x[2]^2)-7)^2)}
g.prime = function(x){
g.prime.da = (-1)*((4*x[1]^3)+(4*x[1]*x[2])-(42*x[1])+(2*x[2]^2)-14)
g.prime.db = (-1)*((2*x[1]^2)-(26*x[2])-22+(4*x[1]*x[2])+(4*x[2]^3))
out = matrix(c(g.prime.da,g.prime.db),ncol=1)
return(out)
}
g.2prime=function(x){
g.2prime.da2 = (-1)*((12*x[1]^2)+(4*x[2])-42)
g.2prime.db2 = (-1)*((12*x[2]^2)+(4*x[1])-26)
g.2prime.dadb = (-1)*(4*(x[1]+x[2]))
out = matrix(c(g.2prime.da2,g.2prime.dadb,
g.2prime.dadb,g.2prime.db2),nrow=2, byrow=TRUE)
return(out)
}
## MAIN
for(i in 1:itr){
x = x - solve(g.2prime(x))%*%g.prime(x)
x.values[i+1,] = x
}
## OUTPUT
x		# FINAL ESTIMATE
g(x) 		# OBJECTIVE FUNCTION AT ESTIMATE
g.prime(x) 	# GRADIENT AT ESTIMATE
## PLOT OF CONVERGENCE
z = matrix(0,100,100)
x1.max = max(4.5,ceiling(max(x.values[,1])))
x1.min = min(-2,floor(min(x.values[,1])))
x2.max = max(3,ceiling(max(x.values[,2])))
x2.min = min(-2,floor(min(x.values[,2])))
x1 = seq(x1.min,x1.max,length=100)
x2 = seq(x2.min,x2.max,length=100)
for(i in 1:100){
for(j in 1:100){
z[i,j] = g(c(x1[i],x2[j]))
}
}
contour(x1,x2,z,nlevels=20,drawlabels=FALSE)
for(i in 1:itr){
segments(x.values[i,1],x.values[i,2],x.values[i+1,1],
x.values[i+1,2],lty=2)
}
