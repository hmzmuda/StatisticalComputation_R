#M step
alpha <- sum(cp1)/n
mu1 <- sum(x*cp1)/sum(cp1)
mu2 <- sum(x*cp2)/sum(cp2)
sigma1 <- sqrt(sum(((x-mu1)^2)*cp1)/sum(cp1))
sigma2 <- sqrt(sum(((x-mu2)^2)*cp2)/sum(cp2))
#update probability values
cp1 <- alpha
cp2 <- 1-alpha
#update counter
i <- i + 1
#Return E-step, unless stopping criteria has been met
Q[i] <- sum(log(totalMix))
}
theta <- list("alpha" = alpha, "mu1" = mu1, "mu2" = mu2, "sigma1" = sigma1,"sigma" = sigma2)
print(theta)
hist(x, prob = T, breaks = 20, xlab = "Velocities (km/sec)", main = "Mixture Model Based on Galaxies Dataset")
lines(density(x), col = "red")
xfit <- seq(8000,35000,200)
EMEstimate <- (alpha * dnorm(xfit,mu1,sigma1)) + ((1-alpha) * dnorm(xfit,mu2,sigma2))
lines(xfit, EMEstimate, col = "green",ylim = max(EMEstimate))
legend('topright', col = c("red","green"), lwd = 2, legend = c("Density of Galaxies", "Estimated EM"))
#call the galaxies dataset
data(galaxies)
x <- galaxies
n <- length(x)
#set.seed(200)
#make an estimation for the mu, sigma, and alpha variables. Can use k clustering based on the remark
kCluster <- kmeans(x,2)$cluster
mu1 <- mean(x[kCluster == 1])
mu2 <- mean(x[kCluster == 2])
sigma1 <- sd(x[kCluster == 1])
sigma2 <- sd(x[kCluster == 2])
alpha1 <- sum(kCluster == 1)/length(kCluster)#Make alpha based on the first mixture
#Other variables
i <- 2 #number of mixture models (two-mixture model)
tol <- 1e-10 #tolerance for the EM Algorithm
#Calculate Q
#initialize Q
Q <- 0
Q[2] <- sum(log(alpha*dnorm(x,mu1,sqrt(sigma1)))) + sum(log((1-alpha)*dnorm(x,mu2,sqrt(sigma2))))
#E step: Compute Q(theta | theta^t) where theta = (alpha,mu1,mu2,sig1,sig2)
while(abs(Q[i]-Q[i-1])>=tol){
#Find the conditional probability for each mixture model
mix1 <- alpha*dnorm(x,mu1,sigma1)
mix2 <- (1-alpha)*dnorm(x,mu2,sigma2)
totalMix <- mix1 + mix2
cp1 <- mix1/totalMix#Conditional Probability for mixture 1
cp2 <- mix2/totalMix#Conditional probability for mixture 2
#M step
alpha <- sum(cp1)/n
mu1 <- sum(x*cp1)/sum(cp1)
mu2 <- sum(x*cp2)/sum(cp2)
sigma1 <- sqrt(sum(((x-mu1)^2)*cp1)/sum(cp1))
sigma2 <- sqrt(sum(((x-mu2)^2)*cp2)/sum(cp2))
#update probability values
cp1 <- alpha
cp2 <- 1-alpha
#update counter
i <- i + 1
#Return E-step, unless stopping criteria has been met
Q[i] <- sum(log(totalMix))
}
theta <- list("alpha" = alpha, "mu1" = mu1, "mu2" = mu2, "sigma1" = sigma1,"sigma" = sigma2)
print(theta)
hist(x, prob = T, breaks = 20, xlab = "Velocities (km/sec)", main = "Mixture Model Based on Galaxies Dataset")
lines(density(x), col = "red")
xfit <- seq(8000,35000,200)
EMEstimate <- (alpha * dnorm(xfit,mu1,sigma1)) + ((1-alpha) * dnorm(xfit,mu2,sigma2))
lines(xfit, EMEstimate, col = "green",ylim = max(EMEstimate))
legend('topright', col = c("red","green"), lwd = 2, legend = c("Density of Galaxies", "Estimated EM"))
#call the galaxies dataset
data(galaxies)
x <- galaxies
n <- length(x)
#set.seed(200)
#make an estimation for the mu, sigma, and alpha variables. Can use k clustering based on the remark
kCluster <- kmeans(x,2)$cluster
mu1 <- mean(x[kCluster == 1])
mu2 <- mean(x[kCluster == 2])
sigma1 <- sd(x[kCluster == 1])
sigma2 <- sd(x[kCluster == 2])
alpha1 <- sum(kCluster == 1)/length(kCluster)#Make alpha based on the first mixture
#Other variables
i <- 2 #number of mixture models (two-mixture model)
tol <- 1e-10 #tolerance for the EM Algorithm
#Calculate Q
#initialize Q
Q <- 0
Q[2] <- sum(log(alpha*dnorm(x,mu1,sqrt(sigma1)))) + sum(log((1-alpha)*dnorm(x,mu2,sqrt(sigma2))))
#E step: Compute Q(theta | theta^t) where theta = (alpha,mu1,mu2,sig1,sig2)
while(abs(Q[i]-Q[i-1])>=tol){
#Find the conditional probability for each mixture model
mix1 <- alpha*dnorm(x,mu1,sigma1)
mix2 <- (1-alpha)*dnorm(x,mu2,sigma2)
totalMix <- mix1 + mix2
cp1 <- mix1/totalMix#Conditional Probability for mixture 1
cp2 <- mix2/totalMix#Conditional probability for mixture 2
#M step
alpha <- sum(cp1)/n
mu1 <- sum(x*cp1)/sum(cp1)
mu2 <- sum(x*cp2)/sum(cp2)
sigma1 <- sqrt(sum(((x-mu1)^2)*cp1)/sum(cp1))
sigma2 <- sqrt(sum(((x-mu2)^2)*cp2)/sum(cp2))
#update probability values
cp1 <- alpha
cp2 <- 1-alpha
#update counter
i <- i + 1
#Return E-step, unless stopping criteria has been met
Q[i] <- sum(log(totalMix))
}
theta <- list("alpha" = alpha, "mu1" = mu1, "mu2" = mu2, "sigma1" = sigma1,"sigma" = sigma2)
print(theta)
hist(x, prob = T, breaks = 20, xlab = "Velocities (km/sec)", main = "Mixture Model Based on Galaxies Dataset")
lines(density(x), col = "red")
xfit <- seq(8000,35000,200)
EMEstimate <- (alpha * dnorm(xfit,mu1,sigma1)) + ((1-alpha) * dnorm(xfit,mu2,sigma2))
lines(xfit, EMEstimate, col = "green",ylim = max(EMEstimate))
legend('topright', col = c("red","green"), lwd = 2, legend = c("Density of Galaxies", "Estimated EM"))
#call the galaxies dataset
data(galaxies)
x <- galaxies
n <- length(x)
#set.seed(200)
#make an estimation for the mu, sigma, and alpha variables. Can use k clustering based on the remark
kCluster <- kmeans(x,2)$cluster
mu1 <- mean(x[kCluster == 1])
mu2 <- mean(x[kCluster == 2])
sigma1 <- sd(x[kCluster == 1])
sigma2 <- sd(x[kCluster == 2])
alpha1 <- sum(kCluster == 1)/length(kCluster)#Make alpha based on the first mixture
#Other variables
i <- 2 #number of mixture models (two-mixture model)
tol <- 1e-10 #tolerance for the EM Algorithm
#Calculate Q
#initialize Q
Q <- 0
Q[2] <- sum(log(alpha*dnorm(x,mu1,sqrt(sigma1)))) + sum(log((1-alpha)*dnorm(x,mu2,sqrt(sigma2))))
#E step: Compute Q(theta | theta^t) where theta = (alpha,mu1,mu2,sig1,sig2)
while(abs(Q[i]-Q[i-1])>=tol){
#Find the conditional probability for each mixture model
mix1 <- alpha*dnorm(x,mu1,sigma1)
mix2 <- (1-alpha)*dnorm(x,mu2,sigma2)
totalMix <- mix1 + mix2
cp1 <- mix1/totalMix#Conditional Probability for mixture 1
cp2 <- mix2/totalMix#Conditional probability for mixture 2
#M step
alpha <- sum(cp1)/n
mu1 <- sum(x*cp1)/sum(cp1)
mu2 <- sum(x*cp2)/sum(cp2)
sigma1 <- sqrt(sum(((x-mu1)^2)*cp1)/sum(cp1))
sigma2 <- sqrt(sum(((x-mu2)^2)*cp2)/sum(cp2))
#update probability values
cp1 <- alpha
cp2 <- 1-alpha
#update counter
i <- i + 1
#Return E-step, unless stopping criteria has been met
Q[i] <- sum(log(totalMix))
}
theta <- list("alpha" = alpha, "mu1" = mu1, "mu2" = mu2, "sigma1" = sigma1,"sigma" = sigma2)
print(theta)
hist(x, prob = T, breaks = 20, xlab = "Velocities (km/sec)", main = "Mixture Model Based on Galaxies Dataset")
lines(density(x), col = "red")
xfit <- seq(8000,35000,200)
EMEstimate <- (alpha * dnorm(xfit,mu1,sigma1)) + ((1-alpha) * dnorm(xfit,mu2,sigma2))
lines(xfit, EMEstimate, col = "green",ylim = max(EMEstimate))
legend('topright', col = c("red","green"), lwd = 2, legend = c("Density of Galaxies", "Estimated EM"))
#call the galaxies dataset
data(galaxies)
x <- galaxies
n <- length(x)
#set.seed(200)
#make an estimation for the mu, sigma, and alpha variables. Can use k clustering based on the remark
kCluster <- kmeans(x,2)$cluster
mu1 <- mean(x[kCluster == 1])
mu2 <- mean(x[kCluster == 2])
sigma1 <- sd(x[kCluster == 1])
sigma2 <- sd(x[kCluster == 2])
alpha1 <- sum(kCluster == 1)/length(kCluster)#Make alpha based on the first mixture
#Other variables
i <- 2 #number of mixture models (two-mixture model)
tol <- 1e-10 #tolerance for the EM Algorithm
#Calculate Q
#initialize Q
Q <- 0
Q[2] <- sum(log(alpha*dnorm(x,mu1,sqrt(sigma1)))) + sum(log((1-alpha)*dnorm(x,mu2,sqrt(sigma2))))
#E step: Compute Q(theta | theta^t) where theta = (alpha,mu1,mu2,sig1,sig2)
while(abs(Q[i]-Q[i-1])>=tol){
#Find the conditional probability for each mixture model
mix1 <- alpha*dnorm(x,mu1,sigma1)
mix2 <- (1-alpha)*dnorm(x,mu2,sigma2)
totalMix <- mix1 + mix2
cp1 <- mix1/totalMix#Conditional Probability for mixture 1
cp2 <- mix2/totalMix#Conditional probability for mixture 2
#M step
alpha <- sum(cp1)/n
mu1 <- sum(x*cp1)/sum(cp1)
mu2 <- sum(x*cp2)/sum(cp2)
sigma1 <- sqrt(sum(((x-mu1)^2)*cp1)/sum(cp1))
sigma2 <- sqrt(sum(((x-mu2)^2)*cp2)/sum(cp2))
#update probability values
cp1 <- alpha
cp2 <- 1-alpha
#update counter
i <- i + 1
#Return E-step, unless stopping criteria has been met
Q[i] <- sum(log(totalMix))
}
theta <- list("alpha" = alpha, "mu1" = mu1, "mu2" = mu2, "sigma1" = sigma1,"sigma" = sigma2)
print(theta)
hist(x, prob = T, breaks = 20, xlab = "Velocities (km/sec)", main = "Mixture Model Based on Galaxies Dataset")
lines(density(x), col = "red")
xfit <- seq(8000,35000,200)
EMEstimate <- (alpha * dnorm(xfit,mu1,sigma1)) + ((1-alpha) * dnorm(xfit,mu2,sigma2))
lines(xfit, EMEstimate, col = "green",ylim = max(EMEstimate))
legend('topright', col = c("red","green"), lwd = 2, legend = c("Density of Galaxies", "Estimated EM"))
#call the galaxies dataset
data(galaxies)
x <- galaxies
n <- length(x)
#set.seed(200)
#make an estimation for the mu, sigma, and alpha variables. Can use k clustering based on the remark
kCluster <- kmeans(x,2)$cluster
mu1 <- mean(x[kCluster == 1])
mu2 <- mean(x[kCluster == 2])
sigma1 <- sd(x[kCluster == 1])
sigma2 <- sd(x[kCluster == 2])
alpha1 <- sum(kCluster == 1)/length(kCluster)#Make alpha based on the first mixture
#Other variables
i <- 2 #number of mixture models (two-mixture model)
tol <- 1e-10 #tolerance for the EM Algorithm
#Calculate Q
#initialize Q
Q <- 0
Q[2] <- sum(log(alpha*dnorm(x,mu1,sqrt(sigma1)))) + sum(log((1-alpha)*dnorm(x,mu2,sqrt(sigma2))))
#E step: Compute Q(theta | theta^t) where theta = (alpha,mu1,mu2,sig1,sig2)
while(abs(Q[i]-Q[i-1])>=tol){
#Find the conditional probability for each mixture model
mix1 <- alpha*dnorm(x,mu1,sigma1)
mix2 <- (1-alpha)*dnorm(x,mu2,sigma2)
totalMix <- mix1 + mix2
cp1 <- mix1/totalMix#Conditional Probability for mixture 1
cp2 <- mix2/totalMix#Conditional probability for mixture 2
#M step
alpha <- sum(cp1)/n
mu1 <- sum(x*cp1)/sum(cp1)
mu2 <- sum(x*cp2)/sum(cp2)
sigma1 <- sqrt(sum(((x-mu1)^2)*cp1)/sum(cp1))
sigma2 <- sqrt(sum(((x-mu2)^2)*cp2)/sum(cp2))
#update probability values
cp1 <- alpha
cp2 <- 1-alpha
#update counter
i <- i + 1
#Return E-step, unless stopping criteria has been met
Q[i] <- sum(log(totalMix))
}
theta <- list("alpha" = alpha, "mu1" = mu1, "mu2" = mu2, "sigma1" = sigma1,"sigma" = sigma2)
print(theta)
hist(x, prob = T, breaks = 20, xlab = "Velocities (km/sec)", main = "Mixture Model Based on Galaxies Dataset")
lines(density(x), col = "red")
xfit <- seq(8000,35000,200)
EMEstimate <- (alpha * dnorm(xfit,mu1,sigma1)) + ((1-alpha) * dnorm(xfit,mu2,sigma2))
lines(xfit, EMEstimate, col = "green",ylim = max(EMEstimate))
legend('topright', col = c("red","green"), lwd = 2, legend = c("Density of Galaxies", "Estimated EM"))
#call the galaxies dataset
data(galaxies)
x <- galaxies
n <- length(x)
#set.seed(200)
#make an estimation for the mu, sigma, and alpha variables. Can use k clustering based on the remark
kCluster <- kmeans(x,2)$cluster
mu1 <- mean(x[kCluster == 1])
mu2 <- mean(x[kCluster == 2])
sigma1 <- sd(x[kCluster == 1])
sigma2 <- sd(x[kCluster == 2])
alpha <- sum(kCluster == 1)/length(kCluster)#Make alpha based on the first mixture
#Other variables
i <- 2 #number of mixture models (two-mixture model)
tol <- 1e-10 #tolerance for the EM Algorithm
#Calculate Q
#initialize Q
Q <- 0
Q[2] <- sum(log(alpha*dnorm(x,mu1,sqrt(sigma1)))) + sum(log((1-alpha)*dnorm(x,mu2,sqrt(sigma2))))
#E step: Compute Q(theta | theta^t) where theta = (alpha,mu1,mu2,sig1,sig2)
while(abs(Q[i]-Q[i-1])>=tol){
#Find the conditional probability for each mixture model
mix1 <- alpha*dnorm(x,mu1,sigma1)
mix2 <- (1-alpha)*dnorm(x,mu2,sigma2)
totalMix <- mix1 + mix2
cp1 <- mix1/totalMix#Conditional Probability for mixture 1
cp2 <- mix2/totalMix#Conditional probability for mixture 2
#M step
alpha <- sum(cp1)/n
mu1 <- sum(x*cp1)/sum(cp1)
mu2 <- sum(x*cp2)/sum(cp2)
sigma1 <- sqrt(sum(((x-mu1)^2)*cp1)/sum(cp1))
sigma2 <- sqrt(sum(((x-mu2)^2)*cp2)/sum(cp2))
#update probability values
cp1 <- alpha
cp2 <- 1-alpha
#update counter
i <- i + 1
#Return E-step, unless stopping criteria has been met
Q[i] <- sum(log(totalMix))
}
theta <- list("alpha" = alpha, "mu1" = mu1, "mu2" = mu2, "sigma1" = sigma1,"sigma" = sigma2)
print(theta)
hist(x, prob = T, breaks = 20, xlab = "Velocities (km/sec)", main = "Mixture Model Based on Galaxies Dataset")
lines(density(x), col = "red")
xfit <- seq(8000,35000,200)
EMEstimate <- (alpha * dnorm(xfit,mu1,sigma1)) + ((1-alpha) * dnorm(xfit,mu2,sigma2))
lines(xfit, EMEstimate, col = "green",ylim = max(EMEstimate))
legend('topright', col = c("red","green"), lwd = 2, legend = c("Density of Galaxies", "Estimated EM"))
#call the galaxies dataset
data(galaxies)
x <- galaxies
n <- length(x)
#set.seed(200)
#make an estimation for the mu, sigma, and alpha variables. Can use k clustering based on the remark
kCluster <- kmeans(x,2)$cluster
mu1 <- mean(x[kCluster == 1])
mu2 <- mean(x[kCluster == 2])
sigma1 <- sd(x[kCluster == 1])
sigma2 <- sd(x[kCluster == 2])
alpha <- sum(kCluster == 1)/length(kCluster)#Make alpha based on the first mixture
#Other variables
i <- 2 #number of mixture models (two-mixture model)
tol <- 1e-10 #tolerance for the EM Algorithm
#Calculate Q
#initialize Q
Q <- 0
Q[2] <- sum(log(alpha*dnorm(x,mu1,sqrt(sigma1)))) + sum(log((1-alpha)*dnorm(x,mu2,sqrt(sigma2))))
#E step: Compute Q(theta | theta^t) where theta = (alpha,mu1,mu2,sig1,sig2)
while(abs(Q[i]-Q[i-1])>=tol){
#Find the conditional probability for each mixture model
mix1 <- alpha*dnorm(x,mu1,sigma1)
mix2 <- (1-alpha)*dnorm(x,mu2,sigma2)
totalMix <- mix1 + mix2
cp1 <- mix1/totalMix#Conditional Probability for mixture 1
cp2 <- mix2/totalMix#Conditional probability for mixture 2
#M step
alpha <- sum(cp1)/n
mu1 <- sum(x*cp1)/sum(cp1)
mu2 <- sum(x*cp2)/sum(cp2)
sigma1 <- sqrt(sum(((x-mu1)^2)*cp1)/sum(cp1))
sigma2 <- sqrt(sum(((x-mu2)^2)*cp2)/sum(cp2))
#update probability values
cp1 <- alpha
cp2 <- 1-alpha
#update counter
i <- i + 1
#Return E-step, unless stopping criteria has been met
Q[i] <- sum(log(totalMix))
}
theta <- list("alpha" = alpha, "mu1" = mu1, "mu2" = mu2, "sigma1" = sigma1,"sigma" = sigma2)
print(theta)
hist(x, prob = T, breaks = 20, xlab = "Velocities (km/sec)", main = "Mixture Model Based on Galaxies Dataset")
lines(density(x), col = "red")
xfit <- seq(8000,35000,200)
EMEstimate <- (alpha * dnorm(xfit,mu1,sigma1)) + ((1-alpha) * dnorm(xfit,mu2,sigma2))
lines(xfit, EMEstimate, col = "green",ylim = max(EMEstimate))
legend('topright', col = c("red","green"), lwd = 2, legend = c("Density of Galaxies", "Estimated EM"))
#call the galaxies dataset
data(galaxies)
x <- galaxies
n <- length(x)
#set.seed(200)
#make an estimation for the mu, sigma, and alpha variables. Can use k clustering based on the remark
kCluster <- kmeans(x,2)$cluster
mu1 <- mean(x[kCluster == 1])
mu2 <- mean(x[kCluster == 2])
sigma1 <- sd(x[kCluster == 1])
sigma2 <- sd(x[kCluster == 2])
alpha <- sum(kCluster == 1)/length(kCluster)#Make alpha based on the first mixture
#Other variables
i <- 2 #number of mixture models (two-mixture model)
tol <- 1e-10 #tolerance for the EM Algorithm
#Calculate Q
#initialize Q
Q <- 0
Q[2] <- sum(log(alpha*dnorm(x,mu1,sqrt(sigma1)))) + sum(log((1-alpha)*dnorm(x,mu2,sqrt(sigma2))))
#E step: Compute Q(theta | theta^t) where theta = (alpha,mu1,mu2,sig1,sig2)
while(abs(Q[i]-Q[i-1])>=tol){
#Find the conditional probability for each mixture model
mix1 <- alpha*dnorm(x,mu1,sigma1)
mix2 <- (1-alpha)*dnorm(x,mu2,sigma2)
totalMix <- mix1 + mix2
cp1 <- mix1/totalMix#Conditional Probability for mixture 1
cp2 <- mix2/totalMix#Conditional probability for mixture 2
#M step
alpha <- sum(cp1)/n
mu1 <- sum(x*cp1)/sum(cp1)
mu2 <- sum(x*cp2)/sum(cp2)
sigma1 <- sqrt(sum(((x-mu1)^2)*cp1)/sum(cp1))
sigma2 <- sqrt(sum(((x-mu2)^2)*cp2)/sum(cp2))
#update probability values
cp1 <- alpha
cp2 <- 1-alpha
#update counter
i <- i + 1
#Return E-step, unless stopping criteria has been met
Q[i] <- sum(log(totalMix))
}
theta <- list("alpha" = alpha, "mu1" = mu1, "mu2" = mu2, "sigma1" = sigma1,"sigma" = sigma2)
print(theta)
hist(x, prob = T, breaks = 20, xlab = "Velocities (km/sec)", main = "Mixture Model Based on Galaxies Dataset")
lines(density(x), col = "red")
xfit <- seq(8000,35000,200)
EMEstimate <- (alpha * dnorm(xfit,mu1,sigma1)) + ((1-alpha) * dnorm(xfit,mu2,sigma2))
lines(xfit, EMEstimate, col = "green",ylim = max(EMEstimate))
legend('topright', col = c("red","green"), lwd = 2, legend = c("Density of Galaxies", "Estimated EM"))
#call the galaxies dataset
data(galaxies)
x <- galaxies
n <- length(x)
#set.seed(200)
#make an estimation for the mu, sigma, and alpha variables. Can use k clustering based on the remark
kCluster <- kmeans(x,2)$cluster
mu1 <- mean(x[kCluster == 1])
mu2 <- mean(x[kCluster == 2])
sigma1 <- sd(x[kCluster == 1])
sigma2 <- sd(x[kCluster == 2])
alpha <- sum(kCluster == 1)/length(kCluster)#Make alpha based on the first mixture
#Other variables
i <- 2 #number of mixture models (two-mixture model)
tol <- 1e-10 #tolerance for the EM Algorithm
#Calculate Q
#initialize Q
Q <- 0
Q[2] <- sum(log(alpha*dnorm(x,mu1,sqrt(sigma1)))) + sum(log((1-alpha)*dnorm(x,mu2,sqrt(sigma2))))
#E step: Compute Q(theta | theta^t) where theta = (alpha,mu1,mu2,sig1,sig2)
while(abs(Q[i]-Q[i-1])>=tol){
#Find the conditional probability for each mixture model
mix1 <- alpha*dnorm(x,mu1,sigma1)
mix2 <- (1-alpha)*dnorm(x,mu2,sigma2)
totalMix <- mix1 + mix2
cp1 <- mix1/totalMix#Conditional Probability for mixture 1
cp2 <- mix2/totalMix#Conditional probability for mixture 2
#M step
alpha <- sum(cp1)/n
mu1 <- sum(x*cp1)/sum(cp1)
mu2 <- sum(x*cp2)/sum(cp2)
sigma1 <- sqrt(sum(((x-mu1)^2)*cp1)/sum(cp1))
sigma2 <- sqrt(sum(((x-mu2)^2)*cp2)/sum(cp2))
#update probability values
cp1 <- alpha
cp2 <- 1-alpha
#update counter
i <- i + 1
#Return E-step, unless stopping criteria has been met
Q[i] <- sum(log(totalMix))
}
theta <- list("alpha" = alpha, "mu1" = mu1, "mu2" = mu2, "sigma1" = sigma1,"sigma" = sigma2)
print(theta)
hist(x, prob = T, breaks = 20, xlab = "Velocities (km/sec)", main = "Mixture Model Based on Galaxies Dataset")
lines(density(x), col = "red")
xfit <- seq(8000,35000,200)
EMEstimate <- (alpha * dnorm(xfit,mu1,sigma1)) + ((1-alpha) * dnorm(xfit,mu2,sigma2))
lines(xfit, EMEstimate, col = "green",ylim = max(EMEstimate))
legend('topright', col = c("red","green"), lwd = 2, legend = c("Density of Galaxies", "Estimated EM"))
#call the galaxies dataset
data(galaxies)
x <- galaxies
n <- length(x)
#set.seed(200)
#make an estimation for the mu, sigma, and alpha variables. Can use k clustering based on the remark
kCluster <- kmeans(x,2)$cluster
mu1 <- mean(x[kCluster == 1])
mu2 <- mean(x[kCluster == 2])
sigma1 <- sd(x[kCluster == 1])
sigma2 <- sd(x[kCluster == 2])
alpha <- sum(kCluster == 1)/length(kCluster)#Make alpha based on the first mixture
#Other variables
i <- 2 #number of mixture models (two-mixture model)
tol <- 1e-10 #tolerance for the EM Algorithm
#Calculate Q
#initialize Q
Q <- 0
Q[2] <- sum(log(alpha*dnorm(x,mu1,sqrt(sigma1)))) + sum(log((1-alpha)*dnorm(x,mu2,sqrt(sigma2))))
#E step: Compute Q(theta | theta^t) where theta = (alpha,mu1,mu2,sig1,sig2)
while(abs(Q[i]-Q[i-1])>=tol){
#Find the conditional probability for each mixture model
mix1 <- alpha*dnorm(x,mu1,sigma1)
mix2 <- (1-alpha)*dnorm(x,mu2,sigma2)
totalMix <- mix1 + mix2
cp1 <- mix1/totalMix#Conditional Probability for mixture 1
cp2 <- mix2/totalMix#Conditional probability for mixture 2
#M step
alpha <- sum(cp1)/n
mu1 <- sum(x*cp1)/sum(cp1)
mu2 <- sum(x*cp2)/sum(cp2)
sigma1 <- sqrt(sum(((x-mu1)^2)*cp1)/sum(cp1))
sigma2 <- sqrt(sum(((x-mu2)^2)*cp2)/sum(cp2))
#update probability values
cp1 <- alpha
cp2 <- 1-alpha
#update counter
i <- i + 1
#Return E-step, unless stopping criteria has been met
Q[i] <- sum(log(totalMix))
}
theta <- list("alpha" = alpha, "mu1" = mu1, "mu2" = mu2, "sigma1" = sigma1,"sigma" = sigma2)
print(theta)
hist(x, prob = T, breaks = 20, xlab = "Velocities (km/sec)", main = "Mixture Model Based on Galaxies Dataset")
lines(density(x), col = "red")
xfit <- seq(8000,35000,200)
EMEstimate <- (alpha * dnorm(xfit,mu1,sigma1)) + ((1-alpha) * dnorm(xfit,mu2,sigma2))
lines(xfit, EMEstimate, col = "green",ylim = max(EMEstimate))
legend('topright', col = c("red","green"), lwd = 2, legend = c("Density of Galaxies", "Estimated EM"))
