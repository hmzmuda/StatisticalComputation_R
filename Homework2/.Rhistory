theta.old <- matrix(1,2,1)
tol <- 10^-10
for(i in 1:n){
theta.new = theta.old - (solve(d2l(N,b1,b2,theta.old)) %*% dl(N,b1,b2,theta.old))
root <- theta.new
current.tol <- sum(abs(theta.new - theta.old))
if(current.tol <= tol){
return(list("iteration" = i,"root" = root))
}
theta.old <- theta.new
}
}
#fisher function
fish.oil <- function(N,b1,b2){
n <- 200
i <- 1
theta.old <- matrix(1,2,1)
tol <- 10^-10
for(i in 1:n){
theta.new = theta.old + (solve(I(N,b1,b2,theta.old)) %*% dl(N,b1,b2,theta.old))
root <- theta.new
current.tol <- sum(abs(theta.new - theta.old))
if(current.tol <= tol){
return(list("iteration" = i,"root" = root))
}
theta.old <- theta.new
}
}
#main body of code (i.e. no function definitions)
N <- data.oil$spills
b1 <- data.oil$importexport
b2 <- data.oil$domestic
output.new <- new.oil(N,b1,b2)
output.fish <- fish.oil(N,b1,b2)
#How can I best compare performance of these two functions?
#Use convergence map like in the Givens et al. example?
print(output.new$iteration)
print(output.new$root)
print(output.fish$iteration)
print(output.fish$root)
#part d: Calculating the standard error
I.error <- function(N, b1, b2, theta.old){
result11 <- sum((b1^2)/(theta.old[1]*b1 + theta.old[2]*b2))#1st row, 1st col
result12 <- sqrt(sum((b1*b2)/(theta.old[1]*b1 + theta.old[2]*b2)))#non-principal components
result22 <- sum((b2^2)/(theta.old[1]*b1 + theta.old[2]*b2))#2nd row, 2nd col
output <- as.numeric(list(result11,result12,result12,result22))
return(matrix(data = output, nrow = 2, byrow = TRUE))
}
newSE = sqrt(solve(d2l(N,b1,b2,output.new$root)))
print(newSE)
fishSE = sqrt(solve(I.error(N,b1,b2,output.fish$root)))
print(fishSE)
#import data set from Givens et al.
data.oil <- read.table("oilspills.dat",header = TRUE)
#likelihood function
l <- function(N, theta.old){
result <- sum(N*log(theta.old)) - sum(theta.old) - sum(log(factorial(N)))
return(result)
}
#derivative of the likelihood function
dl <- function(N, b1, b2, theta.old){
result1 <- sum((N*b1)/(theta.old[1]*b1 + theta.old[2]*b2)-b1)
result2 <- sum((N*b2)/(theta.old[1]*b1 + theta.old[2]*b2)-b2)
output <- as.numeric(list(result1,result2))
return(matrix(data = output, ncol = 1))
}
#double derivative of the likelihood function
d2l <- function(N, b1, b2, theta.old){
result11 <- -1*sum((N*b1^2)/(theta.old[1]*b1 + theta.old[2]*b2)^2)#1st row, 1st col
result12 <- -1*sum((N*b1*b2)/(theta.old[1]*b1 + theta.old[2]*b2)^2)#non-principal components
result22 <- -1*sum((N*b2^2)/(theta.old[1]*b1 + theta.old[2]*b2)^2)#2nd row, 2nd col
output <- as.numeric(list(result11,result12,result12,result22))
return(matrix(data = output, nrow = 2, ncol = 2, byrow = TRUE))
}
#Fisher Information
I <- function(N, b1, b2, theta.old){
result11 <- sum((b1^2)/(theta.old[1]*b1 + theta.old[2]*b2))#1st row, 1st col
result12 <- sum((b1*b2)/(theta.old[1]*b1 + theta.old[2]*b2))#non-principal components
result22 <- sum((b2^2)/(theta.old[1]*b1 + theta.old[2]*b2))#2nd row, 2nd col
output <- as.numeric(list(result11,result12,result12,result22))
return(matrix(data = output, nrow = 2, byrow = TRUE))
}
#Newton's Method
new.oil <- function(N,b1,b2){
n <- 200
i <- 1
theta.old <- matrix(1,2,1)
tol <- 10^-10
for(i in 1:n){
theta.new = theta.old - (solve(d2l(N,b1,b2,theta.old)) %*% dl(N,b1,b2,theta.old))
root <- theta.new
current.tol <- sum(abs(theta.new - theta.old))
if(current.tol <= tol){
return(list("iteration" = i,"root" = root))
}
theta.old <- theta.new
}
}
#fisher function
fish.oil <- function(N,b1,b2){
n <- 200
i <- 1
theta.old <- matrix(1,2,1)
tol <- 10^-10
for(i in 1:n){
theta.new = theta.old + (solve(I(N,b1,b2,theta.old)) %*% dl(N,b1,b2,theta.old))
root <- theta.new
current.tol <- sum(abs(theta.new - theta.old))
if(current.tol <= tol){
return(list("iteration" = i,"root" = root))
}
theta.old <- theta.new
}
}
#main body of code (i.e. no function definitions)
N <- data.oil$spills
b1 <- data.oil$importexport
b2 <- data.oil$domestic
output.new <- new.oil(N,b1,b2)
output.fish <- fish.oil(N,b1,b2)
#How can I best compare performance of these two functions?
#Use convergence map like in the Givens et al. example?
print(output.new$iteration)
print(output.new$root)
print(output.fish$iteration)
print(output.fish$root)
#part d: Calculating the standard error
I.error <- function(N, b1, b2, theta.old){
result11 <- sum((b1^2)/(theta.old[1]*b1 + theta.old[2]*b2))#1st row, 1st col
result12 <- sqrt(sum((b1*b2)/(theta.old[1]*b1 + theta.old[2]*b2)))#non-principal components
result22 <- sum((b2^2)/(theta.old[1]*b1 + theta.old[2]*b2))#2nd row, 2nd col
output <- as.numeric(list(result11,result12,result12,result22))
return(matrix(data = output, nrow = 2, byrow = TRUE))
}
newSE = -1*sqrt(solve(d2l(N,b1,b2,output.new$root)))
print(newSE)
fishSE = sqrt(solve(I.error(N,b1,b2,output.fish$root)))
print(fishSE)
#import data set from Givens et al.
data.oil <- read.table("oilspills.dat",header = TRUE)
#likelihood function
l <- function(N, theta.old){
result <- sum(N*log(theta.old)) - sum(theta.old) - sum(log(factorial(N)))
return(result)
}
#derivative of the likelihood function
dl <- function(N, b1, b2, theta.old){
result1 <- sum((N*b1)/(theta.old[1]*b1 + theta.old[2]*b2)-b1)
result2 <- sum((N*b2)/(theta.old[1]*b1 + theta.old[2]*b2)-b2)
output <- as.numeric(list(result1,result2))
return(matrix(data = output, ncol = 1))
}
#double derivative of the likelihood function
d2l <- function(N, b1, b2, theta.old){
result11 <- -1*sum((N*b1^2)/(theta.old[1]*b1 + theta.old[2]*b2)^2)#1st row, 1st col
result12 <- -1*sum((N*b1*b2)/(theta.old[1]*b1 + theta.old[2]*b2)^2)#non-principal components
result22 <- -1*sum((N*b2^2)/(theta.old[1]*b1 + theta.old[2]*b2)^2)#2nd row, 2nd col
output <- as.numeric(list(result11,result12,result12,result22))
return(matrix(data = output, nrow = 2, ncol = 2, byrow = TRUE))
}
#Fisher Information
I <- function(N, b1, b2, theta.old){
result11 <- sum((b1^2)/(theta.old[1]*b1 + theta.old[2]*b2))#1st row, 1st col
result12 <- sum((b1*b2)/(theta.old[1]*b1 + theta.old[2]*b2))#non-principal components
result22 <- sum((b2^2)/(theta.old[1]*b1 + theta.old[2]*b2))#2nd row, 2nd col
output <- as.numeric(list(result11,result12,result12,result22))
return(matrix(data = output, nrow = 2, byrow = TRUE))
}
#Newton's Method
new.oil <- function(N,b1,b2){
n <- 200
i <- 1
theta.old <- matrix(1,2,1)
tol <- 10^-10
for(i in 1:n){
theta.new = theta.old - (solve(d2l(N,b1,b2,theta.old)) %*% dl(N,b1,b2,theta.old))
root <- theta.new
current.tol <- sum(abs(theta.new - theta.old))
if(current.tol <= tol){
return(list("iteration" = i,"root" = root))
}
theta.old <- theta.new
}
}
#fisher function
fish.oil <- function(N,b1,b2){
n <- 200
i <- 1
theta.old <- matrix(1,2,1)
tol <- 10^-10
for(i in 1:n){
theta.new = theta.old + (solve(I(N,b1,b2,theta.old)) %*% dl(N,b1,b2,theta.old))
root <- theta.new
current.tol <- sum(abs(theta.new - theta.old))
if(current.tol <= tol){
return(list("iteration" = i,"root" = root))
}
theta.old <- theta.new
}
}
#main body of code (i.e. no function definitions)
N <- data.oil$spills
b1 <- data.oil$importexport
b2 <- data.oil$domestic
output.new <- new.oil(N,b1,b2)
output.fish <- fish.oil(N,b1,b2)
#How can I best compare performance of these two functions?
#Use convergence map like in the Givens et al. example?
print(output.new$iteration)
print(output.new$root)
print(output.fish$iteration)
print(output.fish$root)
#part d: Calculating the standard error
I.error <- function(N, b1, b2, theta.old){
result11 <- sum((b1^2)/(theta.old[1]*b1 + theta.old[2]*b2))#1st row, 1st col
result12 <- sqrt(sum((b1*b2)/(theta.old[1]*b1 + theta.old[2]*b2)))#non-principal components
result22 <- sum((b2^2)/(theta.old[1]*b1 + theta.old[2]*b2))#2nd row, 2nd col
output <- as.numeric(list(result11,result12,result12,result22))
return(matrix(data = output, nrow = 2, byrow = TRUE))
}
newSE = sqrt((-1)*solve(d2l(N,b1,b2,output.new$root)))
print(newSE)
fishSE = sqrt(solve(I.error(N,b1,b2,output.fish$root)))
print(fishSE)
#import data set from Givens et al.
data.oil <- read.table("oilspills.dat",header = TRUE)
#likelihood function
l <- function(N, theta.old){
result <- sum(N*log(theta.old)) - sum(theta.old) - sum(log(factorial(N)))
return(result)
}
#derivative of the likelihood function
dl <- function(N, b1, b2, theta.old){
result1 <- sum((N*b1)/(theta.old[1]*b1 + theta.old[2]*b2)-b1)
result2 <- sum((N*b2)/(theta.old[1]*b1 + theta.old[2]*b2)-b2)
output <- as.numeric(list(result1,result2))
return(matrix(data = output, ncol = 1))
}
#double derivative of the likelihood function
d2l <- function(N, b1, b2, theta.old){
result11 <- -1*sum((N*b1^2)/(theta.old[1]*b1 + theta.old[2]*b2)^2)#1st row, 1st col
result12 <- -1*sum((N*b1*b2)/(theta.old[1]*b1 + theta.old[2]*b2)^2)#non-principal components
result22 <- -1*sum((N*b2^2)/(theta.old[1]*b1 + theta.old[2]*b2)^2)#2nd row, 2nd col
output <- as.numeric(list(result11,result12,result12,result22))
return(matrix(data = output, nrow = 2, ncol = 2, byrow = TRUE))
}
#Fisher Information
I <- function(N, b1, b2, theta.old){
result11 <- sum((b1^2)/(theta.old[1]*b1 + theta.old[2]*b2))#1st row, 1st col
result12 <- sum((b1*b2)/(theta.old[1]*b1 + theta.old[2]*b2))#non-principal components
result22 <- sum((b2^2)/(theta.old[1]*b1 + theta.old[2]*b2))#2nd row, 2nd col
output <- as.numeric(list(result11,result12,result12,result22))
return(matrix(data = output, nrow = 2, byrow = TRUE))
}
#Newton's Method
new.oil <- function(N,b1,b2){
n <- 200
i <- 1
theta.old <- matrix(1,2,1)
tol <- 10^-10
for(i in 1:n){
theta.new = theta.old - (solve(d2l(N,b1,b2,theta.old)) %*% dl(N,b1,b2,theta.old))
root <- theta.new
current.tol <- sum(abs(theta.new - theta.old))
if(current.tol <= tol){
return(list("iteration" = i,"root" = root))
}
theta.old <- theta.new
}
}
#fisher function
fish.oil <- function(N,b1,b2){
n <- 200
i <- 1
theta.old <- matrix(1,2,1)
tol <- 10^-10
for(i in 1:n){
theta.new = theta.old + (solve(I(N,b1,b2,theta.old)) %*% dl(N,b1,b2,theta.old))
root <- theta.new
current.tol <- sum(abs(theta.new - theta.old))
if(current.tol <= tol){
return(list("iteration" = i,"root" = root))
}
theta.old <- theta.new
}
}
#main body of code (i.e. no function definitions)
N <- data.oil$spills
b1 <- data.oil$importexport
b2 <- data.oil$domestic
output.new <- new.oil(N,b1,b2)
output.fish <- fish.oil(N,b1,b2)
#How can I best compare performance of these two functions?
#Use convergence map like in the Givens et al. example?
print(output.new$iteration)
print(output.new$root)
print(output.fish$iteration)
print(output.fish$root)
#part d: Calculating the standard error
I.error <- function(N, b1, b2, theta.old){
result11 <- sum((b1^2)/(theta.old[1]*b1 + theta.old[2]*b2))#1st row, 1st col
result12 <- sum((b1*b2)/(theta.old[1]*b1 + theta.old[2]*b2))#non-principal components
result22 <- sum((b2^2)/(theta.old[1]*b1 + theta.old[2]*b2))#2nd row, 2nd col
output <- as.numeric(list(result11,result12,result12,result22))
return(matrix(data = output, nrow = 2, byrow = TRUE))
}
newSE = sqrt(diag((-1)*solve(d2l(N,b1,b2,output.new$root))))
print("Standard error for Newton's Method:", newSE)
fishSE = sqrt(diag(solve(I.error(N,b1,b2,output.fish$root))))
print("Standard Error for Fisher": fishSE)
#import data set from Givens et al.
data.oil <- read.table("oilspills.dat",header = TRUE)
#likelihood function
l <- function(N, theta.old){
result <- sum(N*log(theta.old)) - sum(theta.old) - sum(log(factorial(N)))
return(result)
}
#derivative of the likelihood function
dl <- function(N, b1, b2, theta.old){
result1 <- sum((N*b1)/(theta.old[1]*b1 + theta.old[2]*b2)-b1)
result2 <- sum((N*b2)/(theta.old[1]*b1 + theta.old[2]*b2)-b2)
output <- as.numeric(list(result1,result2))
return(matrix(data = output, ncol = 1))
}
#double derivative of the likelihood function
d2l <- function(N, b1, b2, theta.old){
result11 <- -1*sum((N*b1^2)/(theta.old[1]*b1 + theta.old[2]*b2)^2)#1st row, 1st col
result12 <- -1*sum((N*b1*b2)/(theta.old[1]*b1 + theta.old[2]*b2)^2)#non-principal components
result22 <- -1*sum((N*b2^2)/(theta.old[1]*b1 + theta.old[2]*b2)^2)#2nd row, 2nd col
output <- as.numeric(list(result11,result12,result12,result22))
return(matrix(data = output, nrow = 2, ncol = 2, byrow = TRUE))
}
#Fisher Information
I <- function(N, b1, b2, theta.old){
result11 <- sum((b1^2)/(theta.old[1]*b1 + theta.old[2]*b2))#1st row, 1st col
result12 <- sum((b1*b2)/(theta.old[1]*b1 + theta.old[2]*b2))#non-principal components
result22 <- sum((b2^2)/(theta.old[1]*b1 + theta.old[2]*b2))#2nd row, 2nd col
output <- as.numeric(list(result11,result12,result12,result22))
return(matrix(data = output, nrow = 2, byrow = TRUE))
}
#Newton's Method
new.oil <- function(N,b1,b2){
n <- 200
i <- 1
theta.old <- matrix(1,2,1)
tol <- 10^-10
for(i in 1:n){
theta.new = theta.old - (solve(d2l(N,b1,b2,theta.old)) %*% dl(N,b1,b2,theta.old))
root <- theta.new
current.tol <- sum(abs(theta.new - theta.old))
if(current.tol <= tol){
return(list("iteration" = i,"root" = root))
}
theta.old <- theta.new
}
}
#fisher function
fish.oil <- function(N,b1,b2){
n <- 200
i <- 1
theta.old <- matrix(1,2,1)
tol <- 10^-10
for(i in 1:n){
theta.new = theta.old + (solve(I(N,b1,b2,theta.old)) %*% dl(N,b1,b2,theta.old))
root <- theta.new
current.tol <- sum(abs(theta.new - theta.old))
if(current.tol <= tol){
return(list("iteration" = i,"root" = root))
}
theta.old <- theta.new
}
}
#main body of code (i.e. no function definitions)
N <- data.oil$spills
b1 <- data.oil$importexport
b2 <- data.oil$domestic
output.new <- new.oil(N,b1,b2)
output.fish <- fish.oil(N,b1,b2)
#How can I best compare performance of these two functions?
#Use convergence map like in the Givens et al. example?
print(output.new$iteration)
print(output.new$root)
print(output.fish$iteration)
print(output.fish$root)
#part d: Calculating the standard error
I.error <- function(N, b1, b2, theta.old){
result11 <- sum((b1^2)/(theta.old[1]*b1 + theta.old[2]*b2))#1st row, 1st col
result12 <- sum((b1*b2)/(theta.old[1]*b1 + theta.old[2]*b2))#non-principal components
result22 <- sum((b2^2)/(theta.old[1]*b1 + theta.old[2]*b2))#2nd row, 2nd col
output <- as.numeric(list(result11,result12,result12,result22))
return(matrix(data = output, nrow = 2, byrow = TRUE))
}
newSE = sqrt((-1)*solve(d2l(N,b1,b2,output.new$root)))
print("Standard error for Newton's Method:", newSE)
fishSE = sqrt(solve(I.error(N,b1,b2,output.fish$root)))
print("Standard Error for Fisher": fishSE)
#import data set from Givens et al.
data.oil <- read.table("oilspills.dat",header = TRUE)
#likelihood function
l <- function(N, theta.old){
result <- sum(N*log(theta.old)) - sum(theta.old) - sum(log(factorial(N)))
return(result)
}
#derivative of the likelihood function
dl <- function(N, b1, b2, theta.old){
result1 <- sum((N*b1)/(theta.old[1]*b1 + theta.old[2]*b2)-b1)
result2 <- sum((N*b2)/(theta.old[1]*b1 + theta.old[2]*b2)-b2)
output <- as.numeric(list(result1,result2))
return(matrix(data = output, ncol = 1))
}
#double derivative of the likelihood function
d2l <- function(N, b1, b2, theta.old){
result11 <- -1*sum((N*b1^2)/(theta.old[1]*b1 + theta.old[2]*b2)^2)#1st row, 1st col
result12 <- -1*sum((N*b1*b2)/(theta.old[1]*b1 + theta.old[2]*b2)^2)#non-principal components
result22 <- -1*sum((N*b2^2)/(theta.old[1]*b1 + theta.old[2]*b2)^2)#2nd row, 2nd col
output <- as.numeric(list(result11,result12,result12,result22))
return(matrix(data = output, nrow = 2, ncol = 2, byrow = TRUE))
}
#Fisher Information
I <- function(N, b1, b2, theta.old){
result11 <- sum((b1^2)/(theta.old[1]*b1 + theta.old[2]*b2))#1st row, 1st col
result12 <- sum((b1*b2)/(theta.old[1]*b1 + theta.old[2]*b2))#non-principal components
result22 <- sum((b2^2)/(theta.old[1]*b1 + theta.old[2]*b2))#2nd row, 2nd col
output <- as.numeric(list(result11,result12,result12,result22))
return(matrix(data = output, nrow = 2, byrow = TRUE))
}
#Newton's Method
new.oil <- function(N,b1,b2){
n <- 200
i <- 1
theta.old <- matrix(1,2,1)
tol <- 10^-10
for(i in 1:n){
theta.new = theta.old - (solve(d2l(N,b1,b2,theta.old)) %*% dl(N,b1,b2,theta.old))
root <- theta.new
current.tol <- sum(abs(theta.new - theta.old))
if(current.tol <= tol){
return(list("iteration" = i,"root" = root))
}
theta.old <- theta.new
}
}
#fisher function
fish.oil <- function(N,b1,b2){
n <- 200
i <- 1
theta.old <- matrix(1,2,1)
tol <- 10^-10
for(i in 1:n){
theta.new = theta.old + (solve(I(N,b1,b2,theta.old)) %*% dl(N,b1,b2,theta.old))
root <- theta.new
current.tol <- sum(abs(theta.new - theta.old))
if(current.tol <= tol){
return(list("iteration" = i,"root" = root))
}
theta.old <- theta.new
}
}
#main body of code (i.e. no function definitions)
N <- data.oil$spills
b1 <- data.oil$importexport
b2 <- data.oil$domestic
output.new <- new.oil(N,b1,b2)
output.fish <- fish.oil(N,b1,b2)
#How can I best compare performance of these two functions?
#Use convergence map like in the Givens et al. example?
print(output.new$iteration)
print(output.new$root)
print(output.fish$iteration)
print(output.fish$root)
#part d: Calculating the standard error
I.error <- function(N, b1, b2, theta.old){
result11 <- sum((b1^2)/(theta.old[1]*b1 + theta.old[2]*b2))#1st row, 1st col
result12 <- sum((b1*b2)/(theta.old[1]*b1 + theta.old[2]*b2))#non-principal components
result22 <- sum((b2^2)/(theta.old[1]*b1 + theta.old[2]*b2))#2nd row, 2nd col
output <- as.numeric(list(result11,result12,result12,result22))
return(matrix(data = output, nrow = 2, byrow = TRUE))
}
newSE = sqrt((-1)*solve(d2l(N,b1,b2,output.new$root)))
print(newSE)
fishSE = sqrt(solve(I.error(N,b1,b2,output.fish$root)))
print(fishSE)
data.oil <- read.table("oilspills.dat", header = TRUE)
#Use log likelihood equation
l <- function(dataset, p){
result <- (-1)*sum(dataset$spills*log(p[1]*dataset$importexport + p[2]*dataset$domestic)
- (p[1]*dataset$importexport + p[2]*dataset$domestic))
return(result)
}
#Gradient output
output <- function(dataset, p){
result1 <- sum((dataset$spill*dataset$importexport)/
(p[1]*dataset$importexport + p[2]*dataset$domestic)-dataset$importexport)
result2 <- sum((dataset$spill*dataset$domestic)/
(p[1]*dataset$importexport + p[2]*dataset$domestic)-dataset$domestic)
output <- as.numeric(list(result1,result2))
return((-1)*matrix(data = output, ncol = 1))
}
#Standard error function
I.error <- function(N, b1, b2, theta.old){
result11 <- sum((b1^2)/(theta.old[1]*b1 + theta.old[2]*b2))#1st row, 1st col
result12 <- sqrt(sum((b1*b2)/(theta.old[1]*b1 + theta.old[2]*b2)))#non-principal components
result22 <- sum((b2^2)/(theta.old[1]*b1 + theta.old[2]*b2))#2nd row, 2nd col
output <- as.numeric(list(result11,result12,result12,result22))
return(matrix(data = output, nrow = 2, byrow = TRUE))
}
#optim function
optim.output <- optim(par = c(1,1),fn = l,gr = output,dataset = data.oil,method = "BFGS",hessian = T)
print(optim.output)
#standard error from optim function
optim.error <- sqrt(solve(optim.output$hessian))
print(optim.error)
